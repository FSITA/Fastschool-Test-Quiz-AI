"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@google-cloud";
exports.ids = ["vendor-chunks/@google-cloud"];
exports.modules = {

/***/ "(rsc)/./node_modules/@google-cloud/vertexai/build/src/functions/count_tokens.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@google-cloud/vertexai/build/src/functions/count_tokens.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.countTokens = void 0;\nconst errors_1 = __webpack_require__(/*! ../types/errors */ \"(rsc)/./node_modules/@google-cloud/vertexai/build/src/types/errors.js\");\nconst post_fetch_processing_1 = __webpack_require__(/*! ./post_fetch_processing */ \"(rsc)/./node_modules/@google-cloud/vertexai/build/src/functions/post_fetch_processing.js\");\nconst post_request_1 = __webpack_require__(/*! ./post_request */ \"(rsc)/./node_modules/@google-cloud/vertexai/build/src/functions/post_request.js\");\n/**\n * Make a async request to count tokens.\n * @param request A CountTokensRequest object with the request contents.\n * @returns The CountTokensResponse object with the token count.\n */\nasync function countTokens(location, project, publisherModelEndpoint, token, request, apiEndpoint, requestOptions) {\n    const response = await (0, post_request_1.postRequest)({\n        region: location,\n        project: project,\n        resourcePath: publisherModelEndpoint,\n        resourceMethod: 'countTokens',\n        token: await token,\n        data: request,\n        apiEndpoint: apiEndpoint,\n        requestOptions: requestOptions,\n    }).catch(e => {\n        throw new errors_1.GoogleGenerativeAIError('exception posting request', e);\n    });\n    await (0, post_fetch_processing_1.throwErrorIfNotOK)(response).catch(e => {\n        throw e;\n    });\n    return (0, post_fetch_processing_1.processCountTokenResponse)(response);\n}\nexports.countTokens = countTokens;\n//# sourceMappingURL=count_tokens.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC92ZXJ0ZXhhaS9idWlsZC9zcmMvZnVuY3Rpb25zL2NvdW50X3Rva2Vucy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQjtBQUNuQixpQkFBaUIsbUJBQU8sQ0FBQyw4RkFBaUI7QUFDMUMsZ0NBQWdDLG1CQUFPLENBQUMseUhBQXlCO0FBQ2pFLHVCQUF1QixtQkFBTyxDQUFDLHVHQUFnQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXVpem5vdGUvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC92ZXJ0ZXhhaS9idWlsZC9zcmMvZnVuY3Rpb25zL2NvdW50X3Rva2Vucy5qcz81ZjQzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjMgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY291bnRUb2tlbnMgPSB2b2lkIDA7XG5jb25zdCBlcnJvcnNfMSA9IHJlcXVpcmUoXCIuLi90eXBlcy9lcnJvcnNcIik7XG5jb25zdCBwb3N0X2ZldGNoX3Byb2Nlc3NpbmdfMSA9IHJlcXVpcmUoXCIuL3Bvc3RfZmV0Y2hfcHJvY2Vzc2luZ1wiKTtcbmNvbnN0IHBvc3RfcmVxdWVzdF8xID0gcmVxdWlyZShcIi4vcG9zdF9yZXF1ZXN0XCIpO1xuLyoqXG4gKiBNYWtlIGEgYXN5bmMgcmVxdWVzdCB0byBjb3VudCB0b2tlbnMuXG4gKiBAcGFyYW0gcmVxdWVzdCBBIENvdW50VG9rZW5zUmVxdWVzdCBvYmplY3Qgd2l0aCB0aGUgcmVxdWVzdCBjb250ZW50cy5cbiAqIEByZXR1cm5zIFRoZSBDb3VudFRva2Vuc1Jlc3BvbnNlIG9iamVjdCB3aXRoIHRoZSB0b2tlbiBjb3VudC5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gY291bnRUb2tlbnMobG9jYXRpb24sIHByb2plY3QsIHB1Ymxpc2hlck1vZGVsRW5kcG9pbnQsIHRva2VuLCByZXF1ZXN0LCBhcGlFbmRwb2ludCwgcmVxdWVzdE9wdGlvbnMpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0ICgwLCBwb3N0X3JlcXVlc3RfMS5wb3N0UmVxdWVzdCkoe1xuICAgICAgICByZWdpb246IGxvY2F0aW9uLFxuICAgICAgICBwcm9qZWN0OiBwcm9qZWN0LFxuICAgICAgICByZXNvdXJjZVBhdGg6IHB1Ymxpc2hlck1vZGVsRW5kcG9pbnQsXG4gICAgICAgIHJlc291cmNlTWV0aG9kOiAnY291bnRUb2tlbnMnLFxuICAgICAgICB0b2tlbjogYXdhaXQgdG9rZW4sXG4gICAgICAgIGRhdGE6IHJlcXVlc3QsXG4gICAgICAgIGFwaUVuZHBvaW50OiBhcGlFbmRwb2ludCxcbiAgICAgICAgcmVxdWVzdE9wdGlvbnM6IHJlcXVlc3RPcHRpb25zLFxuICAgIH0pLmNhdGNoKGUgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuR29vZ2xlR2VuZXJhdGl2ZUFJRXJyb3IoJ2V4Y2VwdGlvbiBwb3N0aW5nIHJlcXVlc3QnLCBlKTtcbiAgICB9KTtcbiAgICBhd2FpdCAoMCwgcG9zdF9mZXRjaF9wcm9jZXNzaW5nXzEudGhyb3dFcnJvcklmTm90T0spKHJlc3BvbnNlKS5jYXRjaChlID0+IHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICB9KTtcbiAgICByZXR1cm4gKDAsIHBvc3RfZmV0Y2hfcHJvY2Vzc2luZ18xLnByb2Nlc3NDb3VudFRva2VuUmVzcG9uc2UpKHJlc3BvbnNlKTtcbn1cbmV4cG9ydHMuY291bnRUb2tlbnMgPSBjb3VudFRva2Vucztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvdW50X3Rva2Vucy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/vertexai/build/src/functions/count_tokens.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/vertexai/build/src/functions/generate_content.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@google-cloud/vertexai/build/src/functions/generate_content.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.generateContentStream = exports.generateContent = void 0;\nconst errors_1 = __webpack_require__(/*! ../types/errors */ \"(rsc)/./node_modules/@google-cloud/vertexai/build/src/types/errors.js\");\nconst constants = __webpack_require__(/*! ../util/constants */ \"(rsc)/./node_modules/@google-cloud/vertexai/build/src/util/constants.js\");\nconst post_fetch_processing_1 = __webpack_require__(/*! ./post_fetch_processing */ \"(rsc)/./node_modules/@google-cloud/vertexai/build/src/functions/post_fetch_processing.js\");\nconst post_request_1 = __webpack_require__(/*! ./post_request */ \"(rsc)/./node_modules/@google-cloud/vertexai/build/src/functions/post_request.js\");\nconst pre_fetch_processing_1 = __webpack_require__(/*! ./pre_fetch_processing */ \"(rsc)/./node_modules/@google-cloud/vertexai/build/src/functions/pre_fetch_processing.js\");\nasync function generateContent(location, project, publisherModelEndpoint, token, request, apiEndpoint, generationConfig, safetySettings, tools, requestOptions) {\n    var _a, _b, _c;\n    request = (0, pre_fetch_processing_1.formatContentRequest)(request, generationConfig, safetySettings);\n    (0, pre_fetch_processing_1.validateGenerateContentRequest)(request);\n    if (request.generationConfig) {\n        request.generationConfig = (0, pre_fetch_processing_1.validateGenerationConfig)(request.generationConfig);\n    }\n    const generateContentRequest = {\n        contents: request.contents,\n        systemInstruction: request.systemInstruction,\n        generationConfig: (_a = request.generationConfig) !== null && _a !== void 0 ? _a : generationConfig,\n        safetySettings: (_b = request.safetySettings) !== null && _b !== void 0 ? _b : safetySettings,\n        tools: (_c = request.tools) !== null && _c !== void 0 ? _c : tools,\n    };\n    const response = await (0, post_request_1.postRequest)({\n        region: location,\n        project: project,\n        resourcePath: publisherModelEndpoint,\n        resourceMethod: constants.GENERATE_CONTENT_METHOD,\n        token: await token,\n        data: generateContentRequest,\n        apiEndpoint: apiEndpoint,\n        requestOptions: requestOptions,\n    }).catch(e => {\n        throw new errors_1.GoogleGenerativeAIError('exception posting request to model', e);\n    });\n    await (0, post_fetch_processing_1.throwErrorIfNotOK)(response).catch(e => {\n        throw e;\n    });\n    return (0, post_fetch_processing_1.processUnary)(response);\n}\nexports.generateContent = generateContent;\n/**\n * Make an async stream request to generate content. The response will be\n * returned in stream.\n * @param {GenerateContentRequest} request - {@link GenerateContentRequest}\n * @returns {Promise<StreamGenerateContentResult>} Promise of {@link\n *     StreamGenerateContentResult}\n */\nasync function generateContentStream(location, project, publisherModelEndpoint, token, request, apiEndpoint, generationConfig, safetySettings, tools, requestOptions) {\n    var _a, _b, _c;\n    request = (0, pre_fetch_processing_1.formatContentRequest)(request, generationConfig, safetySettings);\n    (0, pre_fetch_processing_1.validateGenerateContentRequest)(request);\n    if (request.generationConfig) {\n        request.generationConfig = (0, pre_fetch_processing_1.validateGenerationConfig)(request.generationConfig);\n    }\n    const generateContentRequest = {\n        contents: request.contents,\n        systemInstruction: request.systemInstruction,\n        generationConfig: (_a = request.generationConfig) !== null && _a !== void 0 ? _a : generationConfig,\n        safetySettings: (_b = request.safetySettings) !== null && _b !== void 0 ? _b : safetySettings,\n        tools: (_c = request.tools) !== null && _c !== void 0 ? _c : tools,\n    };\n    const response = await (0, post_request_1.postRequest)({\n        region: location,\n        project: project,\n        resourcePath: publisherModelEndpoint,\n        resourceMethod: constants.STREAMING_GENERATE_CONTENT_METHOD,\n        token: await token,\n        data: generateContentRequest,\n        apiEndpoint: apiEndpoint,\n        requestOptions: requestOptions,\n    }).catch(e => {\n        throw new errors_1.GoogleGenerativeAIError('exception posting request', e);\n    });\n    await (0, post_fetch_processing_1.throwErrorIfNotOK)(response).catch(e => {\n        throw e;\n    });\n    return (0, post_fetch_processing_1.processStream)(response);\n}\nexports.generateContentStream = generateContentStream;\n//# sourceMappingURL=generate_content.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC92ZXJ0ZXhhaS9idWlsZC9zcmMvZnVuY3Rpb25zL2dlbmVyYXRlX2NvbnRlbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw2QkFBNkIsR0FBRyx1QkFBdUI7QUFDdkQsaUJBQWlCLG1CQUFPLENBQUMsOEZBQWlCO0FBQzFDLGtCQUFrQixtQkFBTyxDQUFDLGtHQUFtQjtBQUM3QyxnQ0FBZ0MsbUJBQU8sQ0FBQyx5SEFBeUI7QUFDakUsdUJBQXVCLG1CQUFPLENBQUMsdUdBQWdCO0FBQy9DLCtCQUErQixtQkFBTyxDQUFDLHVIQUF3QjtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQSxXQUFXLHdCQUF3QixXQUFXO0FBQzlDLGFBQWEsc0NBQXNDLFlBQVk7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXVpem5vdGUvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC92ZXJ0ZXhhaS9idWlsZC9zcmMvZnVuY3Rpb25zL2dlbmVyYXRlX2NvbnRlbnQuanM/MmYwMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIzIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdlbmVyYXRlQ29udGVudFN0cmVhbSA9IGV4cG9ydHMuZ2VuZXJhdGVDb250ZW50ID0gdm9pZCAwO1xuY29uc3QgZXJyb3JzXzEgPSByZXF1aXJlKFwiLi4vdHlwZXMvZXJyb3JzXCIpO1xuY29uc3QgY29uc3RhbnRzID0gcmVxdWlyZShcIi4uL3V0aWwvY29uc3RhbnRzXCIpO1xuY29uc3QgcG9zdF9mZXRjaF9wcm9jZXNzaW5nXzEgPSByZXF1aXJlKFwiLi9wb3N0X2ZldGNoX3Byb2Nlc3NpbmdcIik7XG5jb25zdCBwb3N0X3JlcXVlc3RfMSA9IHJlcXVpcmUoXCIuL3Bvc3RfcmVxdWVzdFwiKTtcbmNvbnN0IHByZV9mZXRjaF9wcm9jZXNzaW5nXzEgPSByZXF1aXJlKFwiLi9wcmVfZmV0Y2hfcHJvY2Vzc2luZ1wiKTtcbmFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlQ29udGVudChsb2NhdGlvbiwgcHJvamVjdCwgcHVibGlzaGVyTW9kZWxFbmRwb2ludCwgdG9rZW4sIHJlcXVlc3QsIGFwaUVuZHBvaW50LCBnZW5lcmF0aW9uQ29uZmlnLCBzYWZldHlTZXR0aW5ncywgdG9vbHMsIHJlcXVlc3RPcHRpb25zKSB7XG4gICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgcmVxdWVzdCA9ICgwLCBwcmVfZmV0Y2hfcHJvY2Vzc2luZ18xLmZvcm1hdENvbnRlbnRSZXF1ZXN0KShyZXF1ZXN0LCBnZW5lcmF0aW9uQ29uZmlnLCBzYWZldHlTZXR0aW5ncyk7XG4gICAgKDAsIHByZV9mZXRjaF9wcm9jZXNzaW5nXzEudmFsaWRhdGVHZW5lcmF0ZUNvbnRlbnRSZXF1ZXN0KShyZXF1ZXN0KTtcbiAgICBpZiAocmVxdWVzdC5nZW5lcmF0aW9uQ29uZmlnKSB7XG4gICAgICAgIHJlcXVlc3QuZ2VuZXJhdGlvbkNvbmZpZyA9ICgwLCBwcmVfZmV0Y2hfcHJvY2Vzc2luZ18xLnZhbGlkYXRlR2VuZXJhdGlvbkNvbmZpZykocmVxdWVzdC5nZW5lcmF0aW9uQ29uZmlnKTtcbiAgICB9XG4gICAgY29uc3QgZ2VuZXJhdGVDb250ZW50UmVxdWVzdCA9IHtcbiAgICAgICAgY29udGVudHM6IHJlcXVlc3QuY29udGVudHMsXG4gICAgICAgIHN5c3RlbUluc3RydWN0aW9uOiByZXF1ZXN0LnN5c3RlbUluc3RydWN0aW9uLFxuICAgICAgICBnZW5lcmF0aW9uQ29uZmlnOiAoX2EgPSByZXF1ZXN0LmdlbmVyYXRpb25Db25maWcpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGdlbmVyYXRpb25Db25maWcsXG4gICAgICAgIHNhZmV0eVNldHRpbmdzOiAoX2IgPSByZXF1ZXN0LnNhZmV0eVNldHRpbmdzKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBzYWZldHlTZXR0aW5ncyxcbiAgICAgICAgdG9vbHM6IChfYyA9IHJlcXVlc3QudG9vbHMpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IHRvb2xzLFxuICAgIH07XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoMCwgcG9zdF9yZXF1ZXN0XzEucG9zdFJlcXVlc3QpKHtcbiAgICAgICAgcmVnaW9uOiBsb2NhdGlvbixcbiAgICAgICAgcHJvamVjdDogcHJvamVjdCxcbiAgICAgICAgcmVzb3VyY2VQYXRoOiBwdWJsaXNoZXJNb2RlbEVuZHBvaW50LFxuICAgICAgICByZXNvdXJjZU1ldGhvZDogY29uc3RhbnRzLkdFTkVSQVRFX0NPTlRFTlRfTUVUSE9ELFxuICAgICAgICB0b2tlbjogYXdhaXQgdG9rZW4sXG4gICAgICAgIGRhdGE6IGdlbmVyYXRlQ29udGVudFJlcXVlc3QsXG4gICAgICAgIGFwaUVuZHBvaW50OiBhcGlFbmRwb2ludCxcbiAgICAgICAgcmVxdWVzdE9wdGlvbnM6IHJlcXVlc3RPcHRpb25zLFxuICAgIH0pLmNhdGNoKGUgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuR29vZ2xlR2VuZXJhdGl2ZUFJRXJyb3IoJ2V4Y2VwdGlvbiBwb3N0aW5nIHJlcXVlc3QgdG8gbW9kZWwnLCBlKTtcbiAgICB9KTtcbiAgICBhd2FpdCAoMCwgcG9zdF9mZXRjaF9wcm9jZXNzaW5nXzEudGhyb3dFcnJvcklmTm90T0spKHJlc3BvbnNlKS5jYXRjaChlID0+IHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICB9KTtcbiAgICByZXR1cm4gKDAsIHBvc3RfZmV0Y2hfcHJvY2Vzc2luZ18xLnByb2Nlc3NVbmFyeSkocmVzcG9uc2UpO1xufVxuZXhwb3J0cy5nZW5lcmF0ZUNvbnRlbnQgPSBnZW5lcmF0ZUNvbnRlbnQ7XG4vKipcbiAqIE1ha2UgYW4gYXN5bmMgc3RyZWFtIHJlcXVlc3QgdG8gZ2VuZXJhdGUgY29udGVudC4gVGhlIHJlc3BvbnNlIHdpbGwgYmVcbiAqIHJldHVybmVkIGluIHN0cmVhbS5cbiAqIEBwYXJhbSB7R2VuZXJhdGVDb250ZW50UmVxdWVzdH0gcmVxdWVzdCAtIHtAbGluayBHZW5lcmF0ZUNvbnRlbnRSZXF1ZXN0fVxuICogQHJldHVybnMge1Byb21pc2U8U3RyZWFtR2VuZXJhdGVDb250ZW50UmVzdWx0Pn0gUHJvbWlzZSBvZiB7QGxpbmtcbiAqICAgICBTdHJlYW1HZW5lcmF0ZUNvbnRlbnRSZXN1bHR9XG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlQ29udGVudFN0cmVhbShsb2NhdGlvbiwgcHJvamVjdCwgcHVibGlzaGVyTW9kZWxFbmRwb2ludCwgdG9rZW4sIHJlcXVlc3QsIGFwaUVuZHBvaW50LCBnZW5lcmF0aW9uQ29uZmlnLCBzYWZldHlTZXR0aW5ncywgdG9vbHMsIHJlcXVlc3RPcHRpb25zKSB7XG4gICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgcmVxdWVzdCA9ICgwLCBwcmVfZmV0Y2hfcHJvY2Vzc2luZ18xLmZvcm1hdENvbnRlbnRSZXF1ZXN0KShyZXF1ZXN0LCBnZW5lcmF0aW9uQ29uZmlnLCBzYWZldHlTZXR0aW5ncyk7XG4gICAgKDAsIHByZV9mZXRjaF9wcm9jZXNzaW5nXzEudmFsaWRhdGVHZW5lcmF0ZUNvbnRlbnRSZXF1ZXN0KShyZXF1ZXN0KTtcbiAgICBpZiAocmVxdWVzdC5nZW5lcmF0aW9uQ29uZmlnKSB7XG4gICAgICAgIHJlcXVlc3QuZ2VuZXJhdGlvbkNvbmZpZyA9ICgwLCBwcmVfZmV0Y2hfcHJvY2Vzc2luZ18xLnZhbGlkYXRlR2VuZXJhdGlvbkNvbmZpZykocmVxdWVzdC5nZW5lcmF0aW9uQ29uZmlnKTtcbiAgICB9XG4gICAgY29uc3QgZ2VuZXJhdGVDb250ZW50UmVxdWVzdCA9IHtcbiAgICAgICAgY29udGVudHM6IHJlcXVlc3QuY29udGVudHMsXG4gICAgICAgIHN5c3RlbUluc3RydWN0aW9uOiByZXF1ZXN0LnN5c3RlbUluc3RydWN0aW9uLFxuICAgICAgICBnZW5lcmF0aW9uQ29uZmlnOiAoX2EgPSByZXF1ZXN0LmdlbmVyYXRpb25Db25maWcpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGdlbmVyYXRpb25Db25maWcsXG4gICAgICAgIHNhZmV0eVNldHRpbmdzOiAoX2IgPSByZXF1ZXN0LnNhZmV0eVNldHRpbmdzKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBzYWZldHlTZXR0aW5ncyxcbiAgICAgICAgdG9vbHM6IChfYyA9IHJlcXVlc3QudG9vbHMpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IHRvb2xzLFxuICAgIH07XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoMCwgcG9zdF9yZXF1ZXN0XzEucG9zdFJlcXVlc3QpKHtcbiAgICAgICAgcmVnaW9uOiBsb2NhdGlvbixcbiAgICAgICAgcHJvamVjdDogcHJvamVjdCxcbiAgICAgICAgcmVzb3VyY2VQYXRoOiBwdWJsaXNoZXJNb2RlbEVuZHBvaW50LFxuICAgICAgICByZXNvdXJjZU1ldGhvZDogY29uc3RhbnRzLlNUUkVBTUlOR19HRU5FUkFURV9DT05URU5UX01FVEhPRCxcbiAgICAgICAgdG9rZW46IGF3YWl0IHRva2VuLFxuICAgICAgICBkYXRhOiBnZW5lcmF0ZUNvbnRlbnRSZXF1ZXN0LFxuICAgICAgICBhcGlFbmRwb2ludDogYXBpRW5kcG9pbnQsXG4gICAgICAgIHJlcXVlc3RPcHRpb25zOiByZXF1ZXN0T3B0aW9ucyxcbiAgICB9KS5jYXRjaChlID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLkdvb2dsZUdlbmVyYXRpdmVBSUVycm9yKCdleGNlcHRpb24gcG9zdGluZyByZXF1ZXN0JywgZSk7XG4gICAgfSk7XG4gICAgYXdhaXQgKDAsIHBvc3RfZmV0Y2hfcHJvY2Vzc2luZ18xLnRocm93RXJyb3JJZk5vdE9LKShyZXNwb25zZSkuY2F0Y2goZSA9PiB7XG4gICAgICAgIHRocm93IGU7XG4gICAgfSk7XG4gICAgcmV0dXJuICgwLCBwb3N0X2ZldGNoX3Byb2Nlc3NpbmdfMS5wcm9jZXNzU3RyZWFtKShyZXNwb25zZSk7XG59XG5leHBvcnRzLmdlbmVyYXRlQ29udGVudFN0cmVhbSA9IGdlbmVyYXRlQ29udGVudFN0cmVhbTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdlbmVyYXRlX2NvbnRlbnQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/vertexai/build/src/functions/generate_content.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/vertexai/build/src/functions/post_fetch_processing.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@google-cloud/vertexai/build/src/functions/post_fetch_processing.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.processCountTokenResponse = exports.processUnary = exports.aggregateResponses = exports.processStream = exports.throwErrorIfNotOK = void 0;\nconst util_1 = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/@google-cloud/vertexai/build/src/util/index.js\");\nconst errors_1 = __webpack_require__(/*! ../types/errors */ \"(rsc)/./node_modules/@google-cloud/vertexai/build/src/types/errors.js\");\nasync function throwErrorIfNotOK(response) {\n    if (response === undefined) {\n        throw new errors_1.GoogleGenerativeAIError('response is undefined');\n    }\n    if (!response.ok) {\n        const status = response.status;\n        const statusText = response.statusText;\n        const errorBody = await response.json();\n        const errorMessage = `got status: ${status} ${statusText}. ${JSON.stringify(errorBody)}`;\n        if (status >= 400 && status < 500) {\n            throw new errors_1.ClientError(errorMessage);\n        }\n        throw new errors_1.GoogleGenerativeAIError(errorMessage);\n    }\n}\nexports.throwErrorIfNotOK = throwErrorIfNotOK;\nconst responseLineRE = /^data: (.*)(?:\\n\\n|\\r\\r|\\r\\n\\r\\n)/;\nasync function* generateResponseSequence(stream) {\n    const reader = stream.getReader();\n    while (true) {\n        const { value, done } = await reader.read();\n        if (done) {\n            break;\n        }\n        yield addMissingIndexAndRole(value);\n    }\n}\n/**\n * Process a response.body stream from the backend and return an\n * iterator that provides one complete GenerateContentResponse at a time\n * and a promise that resolves with a single aggregated\n * GenerateContentResponse.\n *\n * @param response - Response from a fetch call\n * @ignore\n */\nasync function processStream(response) {\n    if (response === undefined) {\n        throw new errors_1.GoogleGenerativeAIError('Error processing stream because response === undefined');\n    }\n    if (!response.body) {\n        throw new errors_1.GoogleGenerativeAIError('Error processing stream because response.body not found');\n    }\n    const inputStream = response.body.pipeThrough(new TextDecoderStream('utf8', { fatal: true }));\n    const responseStream = getResponseStream(inputStream);\n    const [stream1, stream2] = responseStream.tee();\n    return Promise.resolve({\n        stream: generateResponseSequence(stream1),\n        response: getResponsePromise(stream2),\n    });\n}\nexports.processStream = processStream;\nasync function getResponsePromise(stream) {\n    const allResponses = [];\n    const reader = stream.getReader();\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n            return aggregateResponses(allResponses);\n        }\n        allResponses.push(value);\n    }\n}\n/**\n * Reads a raw stream from the fetch response and join incomplete\n * chunks, returning a new stream that provides a single complete\n * GenerateContentResponse in each iteration.\n * @ignore\n */\nfunction getResponseStream(inputStream) {\n    const reader = inputStream.getReader();\n    const stream = new ReadableStream({\n        start(controller) {\n            let currentText = '';\n            return pump();\n            function pump() {\n                return reader.read().then(({ value, done }) => {\n                    if (done) {\n                        if (currentText.trim()) {\n                            controller.error(new errors_1.GoogleGenerativeAIError('Failed to parse final chunk of stream'));\n                            return;\n                        }\n                        controller.close();\n                        return;\n                    }\n                    currentText += value;\n                    let match = currentText.match(responseLineRE);\n                    let parsedResponse;\n                    while (match) {\n                        try {\n                            parsedResponse = JSON.parse(match[1]);\n                        }\n                        catch (e) {\n                            controller.error(new errors_1.GoogleGenerativeAIError(`Error parsing JSON response from stream chunk: \"${match[1]}\"`));\n                            return;\n                        }\n                        controller.enqueue(parsedResponse);\n                        currentText = currentText.substring(match[0].length);\n                        match = currentText.match(responseLineRE);\n                    }\n                    return pump();\n                });\n            }\n        },\n    });\n    return stream;\n}\n/**\n * Aggregates an array of `GenerateContentResponse`s into a single\n * GenerateContentResponse.\n * @ignore\n * @VisibleForTesting\n */\nfunction aggregateResponses(responses) {\n    var _a, _b;\n    const lastResponse = responses[responses.length - 1];\n    if (lastResponse === undefined) {\n        throw new errors_1.GoogleGenerativeAIError('Error aggregating stream chunks because the final response in stream chunk is undefined');\n    }\n    const aggregatedResponse = {};\n    if (lastResponse.promptFeedback) {\n        aggregatedResponse.promptFeedback = lastResponse.promptFeedback;\n    }\n    if (lastResponse.usageMetadata) {\n        aggregatedResponse.usageMetadata = lastResponse.usageMetadata;\n    }\n    for (const response of responses) {\n        if (!response.candidates || response.candidates.length === 0) {\n            continue;\n        }\n        for (let i = 0; i < response.candidates.length; i++) {\n            if (!aggregatedResponse.candidates) {\n                aggregatedResponse.candidates = [];\n            }\n            if (!aggregatedResponse.candidates[i]) {\n                aggregatedResponse.candidates[i] = {\n                    index: (_a = response.candidates[i].index) !== null && _a !== void 0 ? _a : i,\n                    content: {\n                        role: (_b = response.candidates[i].content.role) !== null && _b !== void 0 ? _b : util_1.constants.MODEL_ROLE,\n                        parts: [{ text: '' }],\n                    },\n                };\n            }\n            const citationMetadataAggregated = aggregateCitationMetadataForCandidate(response.candidates[i], aggregatedResponse.candidates[i]);\n            if (citationMetadataAggregated) {\n                aggregatedResponse.candidates[i].citationMetadata =\n                    citationMetadataAggregated;\n            }\n            const finishResonOfChunk = response.candidates[i].finishReason;\n            if (finishResonOfChunk) {\n                aggregatedResponse.candidates[i].finishReason =\n                    response.candidates[i].finishReason;\n            }\n            const finishMessageOfChunk = response.candidates[i].finishMessage;\n            if (finishMessageOfChunk) {\n                aggregatedResponse.candidates[i].finishMessage = finishMessageOfChunk;\n            }\n            const safetyRatingsOfChunk = response.candidates[i].safetyRatings;\n            if (safetyRatingsOfChunk) {\n                aggregatedResponse.candidates[i].safetyRatings = safetyRatingsOfChunk;\n            }\n            if (response.candidates[i].content &&\n                response.candidates[i].content.parts &&\n                response.candidates[i].content.parts.length > 0) {\n                for (const part of response.candidates[i].content.parts) {\n                    if (part.text) {\n                        aggregatedResponse.candidates[i].content.parts[0].text += part.text;\n                    }\n                    if (part.functionCall) {\n                        aggregatedResponse.candidates[i].content.parts[0].functionCall =\n                            part.functionCall;\n                        // the empty 'text' key should be removed if functionCall is in the\n                        // response\n                        delete aggregatedResponse.candidates[i].content.parts[0].text;\n                    }\n                }\n            }\n            const groundingMetadataAggregated = aggregateGroundingMetadataForCandidate(response.candidates[i], aggregatedResponse.candidates[i]);\n            if (groundingMetadataAggregated) {\n                aggregatedResponse.candidates[i].groundingMetadata =\n                    groundingMetadataAggregated;\n            }\n        }\n    }\n    return aggregatedResponse;\n}\nexports.aggregateResponses = aggregateResponses;\nfunction aggregateCitationMetadataForCandidate(candidateChunk, aggregatedCandidate) {\n    var _a;\n    if (!candidateChunk.citationMetadata) {\n        return;\n    }\n    const emptyCitationMetadata = {\n        citations: [],\n    };\n    const citationMetadataAggregated = (_a = aggregatedCandidate.citationMetadata) !== null && _a !== void 0 ? _a : emptyCitationMetadata;\n    const citationMetadataChunk = candidateChunk.citationMetadata;\n    if (citationMetadataChunk.citations) {\n        citationMetadataAggregated.citations =\n            citationMetadataAggregated.citations.concat(citationMetadataChunk.citations);\n    }\n    return citationMetadataAggregated;\n}\nfunction aggregateGroundingMetadataForCandidate(candidateChunk, aggregatedCandidate) {\n    var _a;\n    if (!candidateChunk.groundingMetadata) {\n        return;\n    }\n    const emptyGroundingMetadata = {\n        webSearchQueries: [],\n        groundingAttributions: [],\n    };\n    const groundingMetadataAggregated = (_a = aggregatedCandidate.groundingMetadata) !== null && _a !== void 0 ? _a : emptyGroundingMetadata;\n    const groundingMetadataChunk = candidateChunk.groundingMetadata;\n    if (groundingMetadataChunk.webSearchQueries) {\n        groundingMetadataAggregated.webSearchQueries =\n            groundingMetadataAggregated.webSearchQueries.concat(groundingMetadataChunk.webSearchQueries);\n    }\n    if (groundingMetadataChunk.groundingAttributions) {\n        groundingMetadataAggregated.groundingAttributions =\n            groundingMetadataAggregated.groundingAttributions.concat(groundingMetadataChunk.groundingAttributions);\n    }\n    return groundingMetadataAggregated;\n}\nfunction addMissingIndexAndRole(response) {\n    const generateContentResponse = response;\n    if (generateContentResponse.candidates &&\n        generateContentResponse.candidates.length > 0) {\n        generateContentResponse.candidates.forEach((candidate, index) => {\n            if (candidate.index === undefined) {\n                generateContentResponse.candidates[index].index = index;\n            }\n            if (candidate.content === undefined) {\n                generateContentResponse.candidates[index].content = {};\n            }\n            if (candidate.content.role === undefined) {\n                generateContentResponse.candidates[index].content.role =\n                    util_1.constants.MODEL_ROLE;\n            }\n        });\n    }\n    return generateContentResponse;\n}\n/**\n * Process model responses from generateContent\n * @ignore\n */\nasync function processUnary(response) {\n    if (response !== undefined) {\n        // ts-ignore\n        const responseJson = await response.json();\n        const generateContentResponse = addMissingIndexAndRole(responseJson);\n        return Promise.resolve({\n            response: generateContentResponse,\n        });\n    }\n    return Promise.resolve({\n        response: {},\n    });\n}\nexports.processUnary = processUnary;\n/**\n * Process model responses from countTokens\n * @ignore\n */\nasync function processCountTokenResponse(response) {\n    if (response) {\n        // ts-ignore\n        return response.json();\n    }\n    return Promise.resolve({});\n}\nexports.processCountTokenResponse = processCountTokenResponse;\n//# sourceMappingURL=post_fetch_processing.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/vertexai/build/src/functions/post_fetch_processing.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/vertexai/build/src/functions/post_request.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@google-cloud/vertexai/build/src/functions/post_request.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.postRequest = void 0;\nconst API_BASE_PATH = 'aiplatform.googleapis.com';\nconst GOOGLE_INTERNAL_ENDPOINT = 'googleapis.com';\nconst AUTHORIZATION_HEADER = 'Authorization';\nconst CONTENT_TYPE_HEADER = 'Content-Type';\nconst USER_AGENT_HEADER = 'User-Agent';\nconst X_GOOG_API_CLIENT_HEADER = 'X-Goog-Api-Client';\nconst SERVER_RESERVED_HEADERS = [AUTHORIZATION_HEADER, CONTENT_TYPE_HEADER];\nconst errors_1 = __webpack_require__(/*! ../types/errors */ \"(rsc)/./node_modules/@google-cloud/vertexai/build/src/types/errors.js\");\nconst constants = __webpack_require__(/*! ../util/constants */ \"(rsc)/./node_modules/@google-cloud/vertexai/build/src/util/constants.js\");\n/**\n * Makes a POST request to a Vertex service\n * @ignore\n */\nasync function postRequest({ region, project, resourcePath, resourceMethod, token, data, apiEndpoint, requestOptions, apiVersion = 'v1', }) {\n    const vertexBaseEndpoint = apiEndpoint !== null && apiEndpoint !== void 0 ? apiEndpoint : `${region}-${API_BASE_PATH}`;\n    let vertexEndpoint = `https://${vertexBaseEndpoint}/${apiVersion}/projects/${project}/locations/${region}/${resourcePath}:${resourceMethod}`;\n    // Use server sent events for streamGenerateContent\n    if (resourceMethod === constants.STREAMING_GENERATE_CONTENT_METHOD) {\n        vertexEndpoint += '?alt=sse';\n    }\n    const necessaryHeaders = new Headers({\n        [AUTHORIZATION_HEADER]: `Bearer ${token}`,\n        [CONTENT_TYPE_HEADER]: 'application/json',\n        [USER_AGENT_HEADER]: constants.USER_AGENT,\n    });\n    const totalHeaders = getExtraHeaders(vertexBaseEndpoint, necessaryHeaders, requestOptions);\n    return fetch(vertexEndpoint, {\n        ...getFetchOptions(requestOptions),\n        method: 'POST',\n        headers: totalHeaders,\n        body: JSON.stringify(data),\n    });\n}\nexports.postRequest = postRequest;\nfunction getFetchOptions(requestOptions) {\n    const fetchOptions = {};\n    if (!requestOptions ||\n        requestOptions.timeout === undefined ||\n        requestOptions.timeout < 0) {\n        return fetchOptions;\n    }\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n    setTimeout(() => abortController.abort(), requestOptions.timeout);\n    fetchOptions.signal = signal;\n    return fetchOptions;\n}\nfunction stringHasLineBreak(header) {\n    if (header === null || header === undefined) {\n        return false;\n    }\n    return header.includes('\\n') || header.includes('\\r');\n}\nfunction headersHasLineBreak(customHeaders) {\n    if (!customHeaders) {\n        return false;\n    }\n    for (const [key, value] of customHeaders.entries()) {\n        if (stringHasLineBreak(key) || stringHasLineBreak(value)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction getExtraHeaders(vertexBaseEndpoint, necessaryHeaders, requestOptions) {\n    var _a;\n    if (stringHasLineBreak(requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.apiClient)) {\n        throw new errors_1.ClientError('Found line break in apiClient request option field, please remove ' +\n            'the line break and try again.');\n    }\n    if (headersHasLineBreak(requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.customHeaders)) {\n        throw new errors_1.ClientError('Found line break in customerHeaders request option field, please remove ' +\n            'the line break and try again.');\n    }\n    const totalHeaders = new Headers(necessaryHeaders);\n    const customHeaders = (_a = requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.customHeaders) !== null && _a !== void 0 ? _a : new Headers();\n    for (const [key, val] of customHeaders.entries()) {\n        totalHeaders.append(key, val);\n    }\n    if (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.apiClient) {\n        totalHeaders.append(X_GOOG_API_CLIENT_HEADER, requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.apiClient);\n    }\n    // Resolve header conflicts.\n    let goldenHeaders;\n    if (vertexBaseEndpoint.endsWith(GOOGLE_INTERNAL_ENDPOINT)) {\n        goldenHeaders = necessaryHeaders;\n    }\n    else {\n        goldenHeaders = customHeaders;\n    }\n    for (const header of SERVER_RESERVED_HEADERS) {\n        if (goldenHeaders.has(header)) {\n            totalHeaders.set(header, goldenHeaders.get(header));\n        }\n    }\n    return totalHeaders;\n}\n//# sourceMappingURL=post_request.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/vertexai/build/src/functions/post_request.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/vertexai/build/src/functions/pre_fetch_processing.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@google-cloud/vertexai/build/src/functions/pre_fetch_processing.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.validateGenerationConfig = exports.validateGenerateContentRequest = exports.formatContentRequest = void 0;\nconst constants = __webpack_require__(/*! ../util/constants */ \"(rsc)/./node_modules/@google-cloud/vertexai/build/src/util/constants.js\");\nfunction formatContentRequest(request, generationConfig, safetySettings) {\n    if (typeof request === 'string') {\n        return {\n            contents: [{ role: constants.USER_ROLE, parts: [{ text: request }] }],\n            generationConfig: generationConfig,\n            safetySettings: safetySettings,\n        };\n    }\n    else {\n        return request;\n    }\n}\nexports.formatContentRequest = formatContentRequest;\nfunction validateGenerateContentRequest(request) {\n    const contents = request.contents;\n    for (const content of contents) {\n        for (const part of content.parts) {\n            if ('fileData' in part) {\n                // @ts-ignore\n                const uri = part['fileData']['fileUri'];\n                if (!uri.startsWith('gs://')) {\n                    throw new URIError(`Found invalid Google Cloud Storage URI ${uri}, Google Cloud Storage URIs must start with gs://`);\n                }\n            }\n        }\n    }\n}\nexports.validateGenerateContentRequest = validateGenerateContentRequest;\nfunction validateGenerationConfig(generationConfig) {\n    if ('topK' in generationConfig) {\n        if (!(generationConfig.topK > 0) || !(generationConfig.topK <= 40)) {\n            delete generationConfig.topK;\n        }\n    }\n    return generationConfig;\n}\nexports.validateGenerationConfig = validateGenerationConfig;\n//# sourceMappingURL=pre_fetch_processing.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC92ZXJ0ZXhhaS9idWlsZC9zcmMvZnVuY3Rpb25zL3ByZV9mZXRjaF9wcm9jZXNzaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0NBQWdDLEdBQUcsc0NBQXNDLEdBQUcsNEJBQTRCO0FBQ3hHLGtCQUFrQixtQkFBTyxDQUFDLGtHQUFtQjtBQUM3QztBQUNBO0FBQ0E7QUFDQSx5QkFBeUIscUNBQXFDLGVBQWUsR0FBRztBQUNoRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRkFBaUYsSUFBSTtBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xdWl6bm90ZS8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3ZlcnRleGFpL2J1aWxkL3NyYy9mdW5jdGlvbnMvcHJlX2ZldGNoX3Byb2Nlc3NpbmcuanM/OTRkZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIzIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnZhbGlkYXRlR2VuZXJhdGlvbkNvbmZpZyA9IGV4cG9ydHMudmFsaWRhdGVHZW5lcmF0ZUNvbnRlbnRSZXF1ZXN0ID0gZXhwb3J0cy5mb3JtYXRDb250ZW50UmVxdWVzdCA9IHZvaWQgMDtcbmNvbnN0IGNvbnN0YW50cyA9IHJlcXVpcmUoXCIuLi91dGlsL2NvbnN0YW50c1wiKTtcbmZ1bmN0aW9uIGZvcm1hdENvbnRlbnRSZXF1ZXN0KHJlcXVlc3QsIGdlbmVyYXRpb25Db25maWcsIHNhZmV0eVNldHRpbmdzKSB7XG4gICAgaWYgKHR5cGVvZiByZXF1ZXN0ID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29udGVudHM6IFt7IHJvbGU6IGNvbnN0YW50cy5VU0VSX1JPTEUsIHBhcnRzOiBbeyB0ZXh0OiByZXF1ZXN0IH1dIH1dLFxuICAgICAgICAgICAgZ2VuZXJhdGlvbkNvbmZpZzogZ2VuZXJhdGlvbkNvbmZpZyxcbiAgICAgICAgICAgIHNhZmV0eVNldHRpbmdzOiBzYWZldHlTZXR0aW5ncyxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiByZXF1ZXN0O1xuICAgIH1cbn1cbmV4cG9ydHMuZm9ybWF0Q29udGVudFJlcXVlc3QgPSBmb3JtYXRDb250ZW50UmVxdWVzdDtcbmZ1bmN0aW9uIHZhbGlkYXRlR2VuZXJhdGVDb250ZW50UmVxdWVzdChyZXF1ZXN0KSB7XG4gICAgY29uc3QgY29udGVudHMgPSByZXF1ZXN0LmNvbnRlbnRzO1xuICAgIGZvciAoY29uc3QgY29udGVudCBvZiBjb250ZW50cykge1xuICAgICAgICBmb3IgKGNvbnN0IHBhcnQgb2YgY29udGVudC5wYXJ0cykge1xuICAgICAgICAgICAgaWYgKCdmaWxlRGF0YScgaW4gcGFydCkge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICBjb25zdCB1cmkgPSBwYXJ0WydmaWxlRGF0YSddWydmaWxlVXJpJ107XG4gICAgICAgICAgICAgICAgaWYgKCF1cmkuc3RhcnRzV2l0aCgnZ3M6Ly8nKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoYEZvdW5kIGludmFsaWQgR29vZ2xlIENsb3VkIFN0b3JhZ2UgVVJJICR7dXJpfSwgR29vZ2xlIENsb3VkIFN0b3JhZ2UgVVJJcyBtdXN0IHN0YXJ0IHdpdGggZ3M6Ly9gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLnZhbGlkYXRlR2VuZXJhdGVDb250ZW50UmVxdWVzdCA9IHZhbGlkYXRlR2VuZXJhdGVDb250ZW50UmVxdWVzdDtcbmZ1bmN0aW9uIHZhbGlkYXRlR2VuZXJhdGlvbkNvbmZpZyhnZW5lcmF0aW9uQ29uZmlnKSB7XG4gICAgaWYgKCd0b3BLJyBpbiBnZW5lcmF0aW9uQ29uZmlnKSB7XG4gICAgICAgIGlmICghKGdlbmVyYXRpb25Db25maWcudG9wSyA+IDApIHx8ICEoZ2VuZXJhdGlvbkNvbmZpZy50b3BLIDw9IDQwKSkge1xuICAgICAgICAgICAgZGVsZXRlIGdlbmVyYXRpb25Db25maWcudG9wSztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZ2VuZXJhdGlvbkNvbmZpZztcbn1cbmV4cG9ydHMudmFsaWRhdGVHZW5lcmF0aW9uQ29uZmlnID0gdmFsaWRhdGVHZW5lcmF0aW9uQ29uZmlnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJlX2ZldGNoX3Byb2Nlc3NpbmcuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/vertexai/build/src/functions/pre_fetch_processing.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/vertexai/build/src/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@google-cloud/vertexai/build/src/index.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.VertexAI = void 0;\nvar vertex_ai_1 = __webpack_require__(/*! ./vertex_ai */ \"(rsc)/./node_modules/@google-cloud/vertexai/build/src/vertex_ai.js\");\nObject.defineProperty(exports, \"VertexAI\", ({ enumerable: true, get: function () { return vertex_ai_1.VertexAI; } }));\n__exportStar(__webpack_require__(/*! ./types */ \"(rsc)/./node_modules/@google-cloud/vertexai/build/src/types/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./models */ \"(rsc)/./node_modules/@google-cloud/vertexai/build/src/models/index.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC92ZXJ0ZXhhaS9idWlsZC9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQkFBZ0I7QUFDaEIsa0JBQWtCLG1CQUFPLENBQUMsdUZBQWE7QUFDdkMsNENBQTJDLEVBQUUscUNBQXFDLGdDQUFnQyxFQUFDO0FBQ25ILGFBQWEsbUJBQU8sQ0FBQyxxRkFBUztBQUM5QixhQUFhLG1CQUFPLENBQUMsdUZBQVU7QUFDL0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xdWl6bm90ZS8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3ZlcnRleGFpL2J1aWxkL3NyYy9pbmRleC5qcz9mZjYwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjMgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5WZXJ0ZXhBSSA9IHZvaWQgMDtcbnZhciB2ZXJ0ZXhfYWlfMSA9IHJlcXVpcmUoXCIuL3ZlcnRleF9haVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlZlcnRleEFJXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB2ZXJ0ZXhfYWlfMS5WZXJ0ZXhBSTsgfSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90eXBlc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vbW9kZWxzXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/vertexai/build/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/vertexai/build/src/models/chat_session.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@google-cloud/vertexai/build/src/models/chat_session.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ChatSessionPreview = exports.ChatSession = void 0;\nconst generate_content_1 = __webpack_require__(/*! ../functions/generate_content */ \"(rsc)/./node_modules/@google-cloud/vertexai/build/src/functions/generate_content.js\");\nconst errors_1 = __webpack_require__(/*! ../types/errors */ \"(rsc)/./node_modules/@google-cloud/vertexai/build/src/types/errors.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/@google-cloud/vertexai/build/src/util/index.js\");\n/**\n * The `ChatSession` class is used to make multiturn send message requests. You\n * can instantiate this class by using the `startChat` method in the\n * `GenerativeModel` class. The `sendMessage` method makes an async call to get\n * the response of a chat message at at once. The `sendMessageStream` method\n * makes an async call to stream the response of a chat message as it's being\n * generated.\n */\nclass ChatSession {\n    async getHistory() {\n        return Promise.resolve(this.historyInternal);\n    }\n    /**\n     * @constructor\n     * @param request - {@link StartChatSessionRequest}\n     */\n    constructor(request, requestOptions) {\n        var _a;\n        this.sendStreamPromise = Promise.resolve();\n        this.project = request.project;\n        this.location = request.location;\n        this.googleAuth = request.googleAuth;\n        this.publisherModelEndpoint = request.publisherModelEndpoint;\n        this.historyInternal = (_a = request.history) !== null && _a !== void 0 ? _a : [];\n        this.generationConfig = request.generationConfig;\n        this.safetySettings = request.safetySettings;\n        this.tools = request.tools;\n        this.apiEndpoint = request.apiEndpoint;\n        this.requestOptions = requestOptions !== null && requestOptions !== void 0 ? requestOptions : {};\n        if (request.systemInstruction) {\n            request.systemInstruction.role = util_1.constants.SYSTEM_ROLE;\n        }\n        this.systemInstruction = request.systemInstruction;\n    }\n    /**\n     * Gets access token from GoogleAuth. Throws {@link GoogleAuthError} when\n     * fails.\n     * @returns Promise of token.\n     */\n    fetchToken() {\n        const tokenPromise = this.googleAuth.getAccessToken().catch(e => {\n            throw new errors_1.GoogleAuthError(util_1.constants.CREDENTIAL_ERROR_MESSAGE, e);\n        });\n        return tokenPromise;\n    }\n    /**\n     * Makes an async call to send chat message.\n     *\n     * The response is returned in {@link\n     * GenerateContentResult.response}.\n     *\n     * @example\n     * ```\n     * const chat = generativeModel.startChat();\n     * const result1 = await chat.sendMessage(\"How can I learn more about Node.js?\");\n     * console.log('Response: ', JSON.stringify(result1.response));\n     *\n     * const result2 = await chat.sendMessage(\"What about python?\");\n     * console.log('Response: ', JSON.stringify(result2.response));\n     * ```\n     *\n     * @param request - send message request.\n     * @returns Promise of {@link GenerateContentResult}.\n     */\n    async sendMessage(request) {\n        const newContent = formulateNewContentFromSendMessageRequest(request);\n        const generateContentrequest = {\n            contents: this.historyInternal.concat(newContent),\n            safetySettings: this.safetySettings,\n            generationConfig: this.generationConfig,\n            tools: this.tools,\n            systemInstruction: this.systemInstruction,\n        };\n        const generateContentResult = await (0, generate_content_1.generateContent)(this.location, this.project, this.publisherModelEndpoint, this.fetchToken(), generateContentrequest, this.apiEndpoint, this.generationConfig, this.safetySettings, this.tools, this.requestOptions).catch(e => {\n            throw e;\n        });\n        const generateContentResponse = await generateContentResult.response;\n        // Only push the latest message to history if the response returns a result\n        if (generateContentResponse.candidates &&\n            generateContentResponse.candidates.length !== 0) {\n            this.historyInternal = this.historyInternal.concat(newContent);\n            const contentFromModel = generateContentResponse.candidates[0].content;\n            this.historyInternal.push(contentFromModel);\n        }\n        return Promise.resolve(generateContentResult);\n    }\n    async appendHistory(streamGenerateContentResultPromise, newContent) {\n        const streamGenerateContentResult = await streamGenerateContentResultPromise;\n        const streamGenerateContentResponse = await streamGenerateContentResult.response;\n        // Only push the latest message to history if the response returned a result\n        if (streamGenerateContentResponse.candidates &&\n            streamGenerateContentResponse.candidates.length !== 0) {\n            this.historyInternal = this.historyInternal.concat(newContent);\n            const contentFromModel = streamGenerateContentResponse.candidates[0].content;\n            this.historyInternal.push(contentFromModel);\n        }\n    }\n    /**\n     * Makes an async call to stream send message.\n     *\n     * The response is streamed chunk by chunk in\n     * {@link StreamGenerateContentResult.stream}. The aggregated response is\n     * avaliable in {@link StreamGenerateContentResult.response} after all chunks\n     * are returned.\n     *\n     * @example\n     * ```\n     * const chat = generativeModel.startChat();\n     * const chatInput = \"How can I learn more about Node.js?\";\n     * const result = await chat.sendMessageStream(chatInput);\n     * for await (const item of result.stream) {\n     *   console.log(item.candidates[0].content.parts[0].text);\n     * }\n     * const response = await result.response;\n     * console.log('aggregated response: ', JSON.stringify(result.response));\n     * ```\n     *\n     * @param request - send message request.\n     * @returns Promise of {@link StreamGenerateContentResult}.\n     */\n    async sendMessageStream(request) {\n        const newContent = formulateNewContentFromSendMessageRequest(request);\n        const generateContentrequest = {\n            contents: this.historyInternal.concat(newContent),\n            safetySettings: this.safetySettings,\n            generationConfig: this.generationConfig,\n            tools: this.tools,\n            systemInstruction: this.systemInstruction,\n        };\n        const streamGenerateContentResultPromise = (0, generate_content_1.generateContentStream)(this.location, this.project, this.publisherModelEndpoint, this.fetchToken(), generateContentrequest, this.apiEndpoint, this.generationConfig, this.safetySettings, this.tools, this.requestOptions).catch(e => {\n            throw e;\n        });\n        this.sendStreamPromise = this.appendHistory(streamGenerateContentResultPromise, newContent).catch(e => {\n            throw new errors_1.GoogleGenerativeAIError('exception appending chat history', e);\n        });\n        return streamGenerateContentResultPromise;\n    }\n}\nexports.ChatSession = ChatSession;\n/**\n * The `ChatSessionPreview` class is used to make multiturn send message requests. You\n * can instantiate this class by using the `startChat` method in the\n * `GenerativeModelPreview` class. The `sendMessage` method makes an async call to get\n * the response of a chat message at at once. The `sendMessageStream` method\n * makes an async call to stream the response of a chat message as it's being\n * generated.\n */\nclass ChatSessionPreview {\n    async getHistory() {\n        return Promise.resolve(this.historyInternal);\n    }\n    /**\n     * @constructor\n     * @param request - {@link StartChatSessionRequest}\n     */\n    constructor(request, requestOptions) {\n        var _a;\n        this.sendStreamPromise = Promise.resolve();\n        this.project = request.project;\n        this.location = request.location;\n        this.googleAuth = request.googleAuth;\n        this.publisherModelEndpoint = request.publisherModelEndpoint;\n        this.historyInternal = (_a = request.history) !== null && _a !== void 0 ? _a : [];\n        this.generationConfig = request.generationConfig;\n        this.safetySettings = request.safetySettings;\n        this.tools = request.tools;\n        this.apiEndpoint = request.apiEndpoint;\n        this.requestOptions = requestOptions !== null && requestOptions !== void 0 ? requestOptions : {};\n        if (request.systemInstruction) {\n            request.systemInstruction.role = util_1.constants.SYSTEM_ROLE;\n        }\n        this.systemInstruction = request.systemInstruction;\n    }\n    /**\n     * Gets access token from GoogleAuth. Throws GoogleAuthError when fails.\n     * @returns Promise of token.\n     */\n    fetchToken() {\n        const tokenPromise = this.googleAuth.getAccessToken().catch(e => {\n            throw new errors_1.GoogleAuthError(util_1.constants.CREDENTIAL_ERROR_MESSAGE, e);\n        });\n        return tokenPromise;\n    }\n    /**\n     * Makes an async call to send chat message.\n     *\n     * The response is returned in {@link\n     * GenerateContentResult.response}.\n     *\n     * @example\n     * ```\n     * const chat = generativeModelPreview.startChat();\n     * const result1 = await chat.sendMessage(\"How can I learn more about Node.js?\");\n     * console.log('Response: ', JSON.stringify(result1.response));\n     *\n     * const result2 = await chat.sendMessage(\"What about python?\");\n     * console.log('Response: ', JSON.stringify(result2.response));\n     * ```\n     *\n     * @param request - send message request.\n     * @returns Promise of {@link GenerateContentResult}.\n     */\n    async sendMessage(request) {\n        const newContent = formulateNewContentFromSendMessageRequest(request);\n        const generateContentrequest = {\n            contents: this.historyInternal.concat(newContent),\n            safetySettings: this.safetySettings,\n            generationConfig: this.generationConfig,\n            tools: this.tools,\n            systemInstruction: this.systemInstruction,\n        };\n        const generateContentResult = await (0, generate_content_1.generateContent)(this.location, this.project, this.publisherModelEndpoint, this.fetchToken(), generateContentrequest, this.apiEndpoint, this.generationConfig, this.safetySettings, this.tools, this.requestOptions).catch(e => {\n            throw e;\n        });\n        const generateContentResponse = await generateContentResult.response;\n        // Only push the latest message to history if the response returned a result\n        if (generateContentResponse.candidates &&\n            generateContentResponse.candidates.length !== 0) {\n            this.historyInternal = this.historyInternal.concat(newContent);\n            const contentFromAssistant = generateContentResponse.candidates[0].content;\n            this.historyInternal.push(contentFromAssistant);\n        }\n        return Promise.resolve(generateContentResult);\n    }\n    async appendHistory(streamGenerateContentResultPromise, newContent) {\n        const streamGenerateContentResult = await streamGenerateContentResultPromise;\n        const streamGenerateContentResponse = await streamGenerateContentResult.response;\n        // Only push the latest message to history if the response returned a result\n        if (streamGenerateContentResponse.candidates &&\n            streamGenerateContentResponse.candidates.length !== 0) {\n            this.historyInternal = this.historyInternal.concat(newContent);\n            const contentFromAssistant = streamGenerateContentResponse.candidates[0].content;\n            this.historyInternal.push(contentFromAssistant);\n        }\n    }\n    /**\n     * Makes an async call to stream send message.\n     *\n     * The response is streamed chunk by chunk in\n     * {@link StreamGenerateContentResult.stream}. The aggregated response is\n     * avaliable in {@link StreamGenerateContentResult.response} after all chunks\n     * are returned.\n     *\n     * @example\n     * ```\n     * const chat = generativeModel.startChat();\n     * const chatInput = \"How can I learn more about Node.js?\";\n     * const result = await chat.sendMessageStream(chatInput);\n     * for await (const item of result.stream) {\n     *   console.log(item.candidates[0].content.parts[0].text);\n     * }\n     * const response = await result.response;\n     * console.log('aggregated response: ', JSON.stringify(result.response));\n     * ```\n     *\n     * @param request - send message request.\n     * @returns Promise of {@link StreamGenerateContentResult}.\n     */\n    async sendMessageStream(request) {\n        const newContent = formulateNewContentFromSendMessageRequest(request);\n        const generateContentrequest = {\n            contents: this.historyInternal.concat(newContent),\n            safetySettings: this.safetySettings,\n            generationConfig: this.generationConfig,\n            tools: this.tools,\n            systemInstruction: this.systemInstruction,\n        };\n        const streamGenerateContentResultPromise = (0, generate_content_1.generateContentStream)(this.location, this.project, this.publisherModelEndpoint, this.fetchToken(), generateContentrequest, this.apiEndpoint, this.generationConfig, this.safetySettings, this.tools, this.requestOptions).catch(e => {\n            throw e;\n        });\n        this.sendStreamPromise = this.appendHistory(streamGenerateContentResultPromise, newContent);\n        return streamGenerateContentResultPromise;\n    }\n}\nexports.ChatSessionPreview = ChatSessionPreview;\nfunction formulateNewContentFromSendMessageRequest(request) {\n    let newParts = [];\n    if (typeof request === 'string') {\n        newParts = [{ text: request }];\n    }\n    else if (Array.isArray(request)) {\n        for (const item of request) {\n            if (typeof item === 'string') {\n                newParts.push({ text: item });\n            }\n            else {\n                newParts.push(item);\n            }\n        }\n    }\n    return assignRoleToPartsAndValidateSendMessageRequest(newParts);\n}\n/**\n * When multiple Part types (i.e. FunctionResponsePart and TextPart) are\n * passed in a single Part array, we may need to assign different roles to each\n * part. Currently only FunctionResponsePart requires a role other than 'user'.\n * @ignore\n * @param parts Array of parts to pass to the model\n * @returns Array of content items\n */\nfunction assignRoleToPartsAndValidateSendMessageRequest(parts) {\n    const userContent = { role: util_1.constants.USER_ROLE, parts: [] };\n    const functionContent = { role: util_1.constants.USER_ROLE, parts: [] };\n    let hasUserContent = false;\n    let hasFunctionContent = false;\n    for (const part of parts) {\n        if ('functionResponse' in part) {\n            functionContent.parts.push(part);\n            hasFunctionContent = true;\n        }\n        else {\n            userContent.parts.push(part);\n            hasUserContent = true;\n        }\n    }\n    if (hasUserContent && hasFunctionContent) {\n        throw new errors_1.ClientError('Within a single message, FunctionResponse cannot be mixed with other type of part in the request for sending chat message.');\n    }\n    if (!hasUserContent && !hasFunctionContent) {\n        throw new errors_1.ClientError('No content is provided for sending chat message.');\n    }\n    if (hasUserContent) {\n        return [userContent];\n    }\n    return [functionContent];\n}\n//# sourceMappingURL=chat_session.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/vertexai/build/src/models/chat_session.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/vertexai/build/src/models/generative_models.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@google-cloud/vertexai/build/src/models/generative_models.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GenerativeModelPreview = exports.GenerativeModel = void 0;\nconst count_tokens_1 = __webpack_require__(/*! ../functions/count_tokens */ \"(rsc)/./node_modules/@google-cloud/vertexai/build/src/functions/count_tokens.js\");\nconst generate_content_1 = __webpack_require__(/*! ../functions/generate_content */ \"(rsc)/./node_modules/@google-cloud/vertexai/build/src/functions/generate_content.js\");\nconst errors_1 = __webpack_require__(/*! ../types/errors */ \"(rsc)/./node_modules/@google-cloud/vertexai/build/src/types/errors.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/@google-cloud/vertexai/build/src/util/index.js\");\nconst chat_session_1 = __webpack_require__(/*! ./chat_session */ \"(rsc)/./node_modules/@google-cloud/vertexai/build/src/models/chat_session.js\");\n/**\n * The `GenerativeModel` class is the base class for the generative models on\n * Vertex AI.\n * NOTE: Don't instantiate this class directly. Use\n * `vertexai.getGenerativeModel()` instead.\n */\nclass GenerativeModel {\n    /**\n     * @constructor\n     * @param getGenerativeModelParams - {@link GetGenerativeModelParams}\n     */\n    constructor(getGenerativeModelParams) {\n        var _a;\n        this.project = getGenerativeModelParams.project;\n        this.location = getGenerativeModelParams.location;\n        this.apiEndpoint = getGenerativeModelParams.apiEndpoint;\n        this.googleAuth = getGenerativeModelParams.googleAuth;\n        this.model = getGenerativeModelParams.model;\n        this.generationConfig = getGenerativeModelParams.generationConfig;\n        this.safetySettings = getGenerativeModelParams.safetySettings;\n        this.tools = getGenerativeModelParams.tools;\n        this.requestOptions = (_a = getGenerativeModelParams.requestOptions) !== null && _a !== void 0 ? _a : {};\n        if (getGenerativeModelParams.systemInstruction) {\n            getGenerativeModelParams.systemInstruction.role = util_1.constants.SYSTEM_ROLE;\n        }\n        this.systemInstruction = getGenerativeModelParams.systemInstruction;\n        if (this.model.startsWith('models/')) {\n            this.publisherModelEndpoint = `publishers/google/${this.model}`;\n        }\n        else {\n            this.publisherModelEndpoint = `publishers/google/models/${this.model}`;\n        }\n    }\n    /**\n     * Gets access token from GoogleAuth. Throws {@link GoogleAuthError} when\n     * fails.\n     * @returns Promise of token string.\n     */\n    fetchToken() {\n        const tokenPromise = this.googleAuth.getAccessToken().catch(e => {\n            throw new errors_1.GoogleAuthError(util_1.constants.CREDENTIAL_ERROR_MESSAGE, e);\n        });\n        return tokenPromise;\n    }\n    /**\n     * Makes an async call to generate content.\n     *\n     * The response will be returned in {@link\n     * GenerateContentResult.response}.\n     *\n     * @example\n     * ```\n     * const request = {\n     *   contents: [{role: 'user', parts: [{text: 'How are you doing today?'}]}],\n     * };\n     * const result = await generativeModel.generateContent(request);\n     * console.log('Response: ', JSON.stringify(result.response));\n     * ```\n     *\n     * @param request - A GenerateContentRequest object with the request contents.\n     * @returns The GenerateContentResponse object with the response candidates.\n     */\n    async generateContent(request) {\n        request = formulateRequestToGenerateContentRequest(request);\n        const formulatedRequest = formulateSystemInstructionIntoGenerateContentRequest(request, this.systemInstruction);\n        return (0, generate_content_1.generateContent)(this.location, this.project, this.publisherModelEndpoint, this.fetchToken(), formulatedRequest, this.apiEndpoint, this.generationConfig, this.safetySettings, this.tools, this.requestOptions);\n    }\n    /**\n     * Makes an async stream request to generate content.\n     *\n     * The response is returned chunk by chunk as it's being generated in {@link\n     * StreamGenerateContentResult.stream}. After all chunks of the response are\n     * returned, the aggregated response is available in\n     * {@link StreamGenerateContentResult.response}.\n     *\n     * @example\n     * ```\n     * const request = {\n     *   contents: [{role: 'user', parts: [{text: 'How are you doing today?'}]}],\n     * };\n     * const streamingResult = await generativeModel.generateContentStream(request);\n     * for await (const item of streamingResult.stream) {\n     *   console.log('stream chunk: ', JSON.stringify(item));\n     * }\n     * const aggregatedResponse = await streamingResult.response;\n     * console.log('aggregated response: ', JSON.stringify(aggregatedResponse));\n     * ```\n     *\n     * @param request - {@link GenerateContentRequest}\n     * @returns Promise of {@link StreamGenerateContentResult}\n     */\n    async generateContentStream(request) {\n        request = formulateRequestToGenerateContentRequest(request);\n        const formulatedRequest = formulateSystemInstructionIntoGenerateContentRequest(request, this.systemInstruction);\n        return (0, generate_content_1.generateContentStream)(this.location, this.project, this.publisherModelEndpoint, this.fetchToken(), formulatedRequest, this.apiEndpoint, this.generationConfig, this.safetySettings, this.tools, this.requestOptions);\n    }\n    /**\n     * Makes an async request to count tokens.\n     *\n     * The `countTokens` function returns the token count and the number of\n     * billable characters for a prompt.\n     *\n     * @example\n     * ```\n     * const request = {\n     *   contents: [{role: 'user', parts: [{text: 'How are you doing today?'}]}],\n     * };\n     * const resp = await generativeModel.countTokens(request);\n     * console.log('count tokens response: ', resp);\n     * ```\n     *\n     * @param request - A CountTokensRequest object with the request contents.\n     * @returns The CountTokensResponse object with the token count.\n     */\n    async countTokens(request) {\n        return (0, count_tokens_1.countTokens)(this.location, this.project, this.publisherModelEndpoint, this.fetchToken(), request, this.apiEndpoint, this.requestOptions);\n    }\n    /**\n     * Instantiates a {@link ChatSession}.\n     *\n     * The {@link ChatSession} class is a stateful class that holds the state of\n     * the conversation with the model and provides methods to interact with the\n     * model in chat mode. Calling this method doesn't make any calls to a remote\n     * endpoint. To make remote call, use {@link ChatSession.sendMessage} or\n     * @link ChatSession.sendMessageStream}.\n     *\n     * @example\n     * ```\n     * const chat = generativeModel.startChat();\n     * const result1 = await chat.sendMessage(\"How can I learn more about Node.js?\");\n     * const response1 = await result1.response;\n     * console.log('Response: ', JSON.stringify(response1));\n     *\n     * const result2 = await chat.sendMessageStream(\"What about python?\");\n     * const response2 = await result2.response;\n     * console.log('Response: ', JSON.stringify(await response2));\n     * ```\n     *\n     * @param request - {@link StartChatParams}\n     * @returns {@link ChatSession}\n     */\n    startChat(request) {\n        var _a, _b, _c, _d, _e;\n        const startChatRequest = {\n            project: this.project,\n            location: this.location,\n            googleAuth: this.googleAuth,\n            publisherModelEndpoint: this.publisherModelEndpoint,\n            tools: this.tools,\n        };\n        if (request) {\n            startChatRequest.history = request.history;\n            startChatRequest.generationConfig =\n                (_a = request.generationConfig) !== null && _a !== void 0 ? _a : this.generationConfig;\n            startChatRequest.safetySettings =\n                (_b = request.safetySettings) !== null && _b !== void 0 ? _b : this.safetySettings;\n            startChatRequest.tools = (_c = request.tools) !== null && _c !== void 0 ? _c : this.tools;\n            startChatRequest.apiEndpoint = (_d = request.apiEndpoint) !== null && _d !== void 0 ? _d : this.apiEndpoint;\n            startChatRequest.systemInstruction =\n                (_e = request.systemInstruction) !== null && _e !== void 0 ? _e : this.systemInstruction;\n        }\n        return new chat_session_1.ChatSession(startChatRequest, this.requestOptions);\n    }\n}\nexports.GenerativeModel = GenerativeModel;\n/**\n * The `GenerativeModelPreview` class is the base class for the generative models\n * that are in preview.\n * NOTE: Don't instantiate this class directly. Use\n * `vertexai.preview.getGenerativeModel()` instead.\n */\nclass GenerativeModelPreview {\n    /**\n     * @constructor\n     * @param getGenerativeModelParams - {@link GetGenerativeModelParams}\n     */\n    constructor(getGenerativeModelParams) {\n        var _a;\n        this.project = getGenerativeModelParams.project;\n        this.location = getGenerativeModelParams.location;\n        this.apiEndpoint = getGenerativeModelParams.apiEndpoint;\n        this.googleAuth = getGenerativeModelParams.googleAuth;\n        this.model = getGenerativeModelParams.model;\n        this.generationConfig = getGenerativeModelParams.generationConfig;\n        this.safetySettings = getGenerativeModelParams.safetySettings;\n        this.tools = getGenerativeModelParams.tools;\n        this.requestOptions = (_a = getGenerativeModelParams.requestOptions) !== null && _a !== void 0 ? _a : {};\n        if (getGenerativeModelParams.systemInstruction) {\n            getGenerativeModelParams.systemInstruction.role = util_1.constants.SYSTEM_ROLE;\n        }\n        this.systemInstruction = getGenerativeModelParams.systemInstruction;\n        if (this.model.startsWith('models/')) {\n            this.publisherModelEndpoint = `publishers/google/${this.model}`;\n        }\n        else {\n            this.publisherModelEndpoint = `publishers/google/models/${this.model}`;\n        }\n    }\n    /**\n     * Gets access token from GoogleAuth. Throws {@link GoogleAuthError} when\n     * fails.\n     * @returns Promise of token string.\n     */\n    fetchToken() {\n        const tokenPromise = this.googleAuth.getAccessToken().catch(e => {\n            throw new errors_1.GoogleAuthError(util_1.constants.CREDENTIAL_ERROR_MESSAGE, e);\n        });\n        return tokenPromise;\n    }\n    /**\n     * Makes an async call to generate content.\n     *\n     * The response will be returned in {@link GenerateContentResult.response}.\n     *\n     * @example\n     * ```\n     * const request = {\n     *   contents: [{role: 'user', parts: [{text: 'How are you doing today?'}]}],\n     * };\n     * const result = await generativeModelPreview.generateContent(request);\n     * console.log('Response: ', JSON.stringify(result.response));\n     * ```\n     *\n     * @param request - A GenerateContentRequest object with the request contents.\n     * @returns The GenerateContentResponse object with the response candidates.\n     */\n    async generateContent(request) {\n        request = formulateRequestToGenerateContentRequest(request);\n        const formulatedRequest = formulateSystemInstructionIntoGenerateContentRequest(request, this.systemInstruction);\n        return (0, generate_content_1.generateContent)(this.location, this.project, this.publisherModelEndpoint, this.fetchToken(), formulatedRequest, this.apiEndpoint, this.generationConfig, this.safetySettings, this.tools, this.requestOptions);\n    }\n    /**\n     * Makes an async stream request to generate content.\n     *\n     * The response is returned chunk by chunk as it's being generated in {@link\n     * StreamGenerateContentResult.stream}. After all chunks of the response are\n     * returned, the aggregated response is available in\n     * {@link StreamGenerateContentResult.response}.\n     *\n     * @example\n     * ```\n     * const request = {\n     *   contents: [{role: 'user', parts: [{text: 'How are you doing today?'}]}],\n     * };\n     * const streamingResult = await generativeModelPreview.generateContentStream(request);\n     * for await (const item of streamingResult.stream) {\n     *   console.log('stream chunk: ', JSON.stringify(item));\n     * }\n     * const aggregatedResponse = await streamingResult.response;\n     * console.log('aggregated response: ', JSON.stringify(aggregatedResponse));\n     * ```\n     *\n     * @param request - {@link GenerateContentRequest}\n     * @returns Promise of {@link StreamGenerateContentResult}\n     */\n    async generateContentStream(request) {\n        request = formulateRequestToGenerateContentRequest(request);\n        const formulatedRequest = formulateSystemInstructionIntoGenerateContentRequest(request, this.systemInstruction);\n        return (0, generate_content_1.generateContentStream)(this.location, this.project, this.publisherModelEndpoint, this.fetchToken(), formulatedRequest, this.apiEndpoint, this.generationConfig, this.safetySettings, this.tools, this.requestOptions);\n    }\n    /**\n     * Makes an async request to count tokens.\n     *\n     * The `countTokens` function returns the token count and the number of\n     * billable characters for a prompt.\n     *\n     * @example\n     * ```\n     * const request = {\n     *   contents: [{role: 'user', parts: [{text: 'How are you doing today?'}]}],\n     * };\n     * const resp = await generativeModelPreview.countTokens(request);\n     * console.log('count tokens response: ', resp);\n     * ```\n     *\n     * @param request - A CountTokensRequest object with the request contents.\n     * @returns The CountTokensResponse object with the token count.\n     */\n    async countTokens(request) {\n        return (0, count_tokens_1.countTokens)(this.location, this.project, this.publisherModelEndpoint, this.fetchToken(), request, this.apiEndpoint, this.requestOptions);\n    }\n    /**\n     * Instantiates a {@link ChatSessionPreview}.\n     *\n     * The {@link ChatSessionPreview} class is a stateful class that holds the state of\n     * the conversation with the model and provides methods to interact with the\n     * model in chat mode. Calling this method doesn't make any calls to a remote\n     * endpoint. To make remote call, use {@link ChatSessionPreview.sendMessage} or\n     * {@link ChatSessionPreview.sendMessageStream}.\n     *\n     * @example\n     * ```\n     * const chat = generativeModelPreview.startChat();\n     * const result1 = await chat.sendMessage(\"How can I learn more about Node.js?\");\n     * const response1 = await result1.response;\n     * console.log('Response: ', JSON.stringify(response1));\n     *\n     * const result2 = await chat.sendMessageStream(\"What about python?\");\n     * const response2 = await result2.response;\n     * console.log('Response: ', JSON.stringify(await response2));\n     * ```\n     *\n     * @param request - {@link StartChatParams}\n     * @returns {@link ChatSessionPreview}\n     */\n    startChat(request) {\n        var _a, _b, _c, _d;\n        const startChatRequest = {\n            project: this.project,\n            location: this.location,\n            googleAuth: this.googleAuth,\n            publisherModelEndpoint: this.publisherModelEndpoint,\n            tools: this.tools,\n        };\n        if (request) {\n            startChatRequest.history = request.history;\n            startChatRequest.generationConfig =\n                (_a = request.generationConfig) !== null && _a !== void 0 ? _a : this.generationConfig;\n            startChatRequest.safetySettings =\n                (_b = request.safetySettings) !== null && _b !== void 0 ? _b : this.safetySettings;\n            startChatRequest.tools = (_c = request.tools) !== null && _c !== void 0 ? _c : this.tools;\n            startChatRequest.systemInstruction =\n                (_d = request.systemInstruction) !== null && _d !== void 0 ? _d : this.systemInstruction;\n        }\n        return new chat_session_1.ChatSessionPreview(startChatRequest, this.requestOptions);\n    }\n}\nexports.GenerativeModelPreview = GenerativeModelPreview;\nfunction formulateRequestToGenerateContentRequest(request) {\n    if (typeof request === 'string') {\n        return {\n            contents: [{ role: util_1.constants.USER_ROLE, parts: [{ text: request }] }],\n        };\n    }\n    return request;\n}\nfunction formulateSystemInstructionIntoGenerateContentRequest(methodRequest, classSystemInstruction) {\n    if (methodRequest.systemInstruction) {\n        methodRequest.systemInstruction.role = util_1.constants.SYSTEM_ROLE;\n        return methodRequest;\n    }\n    if (classSystemInstruction) {\n        methodRequest.systemInstruction = classSystemInstruction;\n    }\n    return methodRequest;\n}\n//# sourceMappingURL=generative_models.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/vertexai/build/src/models/generative_models.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/vertexai/build/src/models/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@google-cloud/vertexai/build/src/models/index.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GenerativeModelPreview = exports.GenerativeModel = exports.ChatSessionPreview = exports.ChatSession = void 0;\nvar chat_session_1 = __webpack_require__(/*! ./chat_session */ \"(rsc)/./node_modules/@google-cloud/vertexai/build/src/models/chat_session.js\");\nObject.defineProperty(exports, \"ChatSession\", ({ enumerable: true, get: function () { return chat_session_1.ChatSession; } }));\nObject.defineProperty(exports, \"ChatSessionPreview\", ({ enumerable: true, get: function () { return chat_session_1.ChatSessionPreview; } }));\nvar generative_models_1 = __webpack_require__(/*! ./generative_models */ \"(rsc)/./node_modules/@google-cloud/vertexai/build/src/models/generative_models.js\");\nObject.defineProperty(exports, \"GenerativeModel\", ({ enumerable: true, get: function () { return generative_models_1.GenerativeModel; } }));\nObject.defineProperty(exports, \"GenerativeModelPreview\", ({ enumerable: true, get: function () { return generative_models_1.GenerativeModelPreview; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC92ZXJ0ZXhhaS9idWlsZC9zcmMvbW9kZWxzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsOEJBQThCLEdBQUcsdUJBQXVCLEdBQUcsMEJBQTBCLEdBQUcsbUJBQW1CO0FBQzNHLHFCQUFxQixtQkFBTyxDQUFDLG9HQUFnQjtBQUM3QywrQ0FBOEMsRUFBRSxxQ0FBcUMsc0NBQXNDLEVBQUM7QUFDNUgsc0RBQXFELEVBQUUscUNBQXFDLDZDQUE2QyxFQUFDO0FBQzFJLDBCQUEwQixtQkFBTyxDQUFDLDhHQUFxQjtBQUN2RCxtREFBa0QsRUFBRSxxQ0FBcUMsK0NBQStDLEVBQUM7QUFDekksMERBQXlELEVBQUUscUNBQXFDLHNEQUFzRCxFQUFDO0FBQ3ZKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXVpem5vdGUvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC92ZXJ0ZXhhaS9idWlsZC9zcmMvbW9kZWxzL2luZGV4LmpzPzc0YmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5HZW5lcmF0aXZlTW9kZWxQcmV2aWV3ID0gZXhwb3J0cy5HZW5lcmF0aXZlTW9kZWwgPSBleHBvcnRzLkNoYXRTZXNzaW9uUHJldmlldyA9IGV4cG9ydHMuQ2hhdFNlc3Npb24gPSB2b2lkIDA7XG52YXIgY2hhdF9zZXNzaW9uXzEgPSByZXF1aXJlKFwiLi9jaGF0X3Nlc3Npb25cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDaGF0U2Vzc2lvblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY2hhdF9zZXNzaW9uXzEuQ2hhdFNlc3Npb247IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDaGF0U2Vzc2lvblByZXZpZXdcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNoYXRfc2Vzc2lvbl8xLkNoYXRTZXNzaW9uUHJldmlldzsgfSB9KTtcbnZhciBnZW5lcmF0aXZlX21vZGVsc18xID0gcmVxdWlyZShcIi4vZ2VuZXJhdGl2ZV9tb2RlbHNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJHZW5lcmF0aXZlTW9kZWxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdlbmVyYXRpdmVfbW9kZWxzXzEuR2VuZXJhdGl2ZU1vZGVsOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiR2VuZXJhdGl2ZU1vZGVsUHJldmlld1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2VuZXJhdGl2ZV9tb2RlbHNfMS5HZW5lcmF0aXZlTW9kZWxQcmV2aWV3OyB9IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/vertexai/build/src/models/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/vertexai/build/src/types/content.js":
/*!************************************************************************!*\
  !*** ./node_modules/@google-cloud/vertexai/build/src/types/content.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FunctionDeclarationSchemaType = exports.FinishReason = exports.BlockedReason = exports.HarmSeverity = exports.HarmProbability = exports.HarmBlockThreshold = exports.HarmCategory = void 0;\n/**\n * Harm categories that will block the content.\n */\nvar HarmCategory;\n(function (HarmCategory) {\n    /** The harm category is unspecified. */\n    HarmCategory[\"HARM_CATEGORY_UNSPECIFIED\"] = \"HARM_CATEGORY_UNSPECIFIED\";\n    /** The harm category is hate speech. */\n    HarmCategory[\"HARM_CATEGORY_HATE_SPEECH\"] = \"HARM_CATEGORY_HATE_SPEECH\";\n    /** The harm category is dangerous content. */\n    HarmCategory[\"HARM_CATEGORY_DANGEROUS_CONTENT\"] = \"HARM_CATEGORY_DANGEROUS_CONTENT\";\n    /** The harm category is harassment. */\n    HarmCategory[\"HARM_CATEGORY_HARASSMENT\"] = \"HARM_CATEGORY_HARASSMENT\";\n    /** The harm category is sexually explicit content. */\n    HarmCategory[\"HARM_CATEGORY_SEXUALLY_EXPLICIT\"] = \"HARM_CATEGORY_SEXUALLY_EXPLICIT\";\n})(HarmCategory || (exports.HarmCategory = HarmCategory = {}));\n/**\n * Probability based thresholds levels for blocking.\n */\nvar HarmBlockThreshold;\n(function (HarmBlockThreshold) {\n    /** Unspecified harm block threshold. */\n    HarmBlockThreshold[\"HARM_BLOCK_THRESHOLD_UNSPECIFIED\"] = \"HARM_BLOCK_THRESHOLD_UNSPECIFIED\";\n    /** Block low threshold and above (i.e. block more). */\n    HarmBlockThreshold[\"BLOCK_LOW_AND_ABOVE\"] = \"BLOCK_LOW_AND_ABOVE\";\n    /** Block medium threshold and above. */\n    HarmBlockThreshold[\"BLOCK_MEDIUM_AND_ABOVE\"] = \"BLOCK_MEDIUM_AND_ABOVE\";\n    /** Block only high threshold (i.e. block less). */\n    HarmBlockThreshold[\"BLOCK_ONLY_HIGH\"] = \"BLOCK_ONLY_HIGH\";\n    /** Block none. */\n    HarmBlockThreshold[\"BLOCK_NONE\"] = \"BLOCK_NONE\";\n})(HarmBlockThreshold || (exports.HarmBlockThreshold = HarmBlockThreshold = {}));\n/**\n * Harm probability levels in the content.\n */\nvar HarmProbability;\n(function (HarmProbability) {\n    /** Harm probability unspecified. */\n    HarmProbability[\"HARM_PROBABILITY_UNSPECIFIED\"] = \"HARM_PROBABILITY_UNSPECIFIED\";\n    HarmProbability[\"NEGLIGIBLE\"] = \"NEGLIGIBLE\";\n    /** Low level of harm. */\n    HarmProbability[\"LOW\"] = \"LOW\";\n    /** Medium level of harm. */\n    HarmProbability[\"MEDIUM\"] = \"MEDIUM\";\n    /** High level of harm. */\n    HarmProbability[\"HIGH\"] = \"HIGH\";\n})(HarmProbability || (exports.HarmProbability = HarmProbability = {}));\n/**\n * Harm severity levels\n */\nvar HarmSeverity;\n(function (HarmSeverity) {\n    /** Harm severity unspecified. */\n    HarmSeverity[\"HARM_SEVERITY_UNSPECIFIED\"] = \"HARM_SEVERITY_UNSPECIFIED\";\n    /** Negligible level of harm severity. */\n    HarmSeverity[\"HARM_SEVERITY_NEGLIGIBLE\"] = \"HARM_SEVERITY_NEGLIGIBLE\";\n    /** Low level of harm severity. */\n    HarmSeverity[\"HARM_SEVERITY_LOW\"] = \"HARM_SEVERITY_LOW\";\n    /** Medium level of harm severity. */\n    HarmSeverity[\"HARM_SEVERITY_MEDIUM\"] = \"HARM_SEVERITY_MEDIUM\";\n    /** High level of harm severity. */\n    HarmSeverity[\"HARM_SEVERITY_HIGH\"] = \"HARM_SEVERITY_HIGH\";\n})(HarmSeverity || (exports.HarmSeverity = HarmSeverity = {}));\n/**\n * The reason why the reponse is blocked.\n */\nvar BlockedReason;\n(function (BlockedReason) {\n    /** Unspecified blocked reason. */\n    BlockedReason[\"BLOCKED_REASON_UNSPECIFIED\"] = \"BLOCK_REASON_UNSPECIFIED\";\n    /** Candidates blocked due to safety. */\n    BlockedReason[\"SAFETY\"] = \"SAFETY\";\n    /** Candidates blocked due to other reason. */\n    BlockedReason[\"OTHER\"] = \"OTHER\";\n    /** terminology blocklist. */\n    BlockedReason[\"BLOCKLIST\"] = \"BLOCKLIST\";\n    /** Candidates blocked due to prohibited content. */\n    BlockedReason[\"PROHIBITED_CONTENT\"] = \"PROHIBITED_CONTENT\";\n})(BlockedReason || (exports.BlockedReason = BlockedReason = {}));\n/**\n * The reason why the model stopped generating tokens.\n * If empty, the model has not stopped generating the tokens.\n */\nvar FinishReason;\n(function (FinishReason) {\n    /** The finish reason is unspecified. */\n    FinishReason[\"FINISH_REASON_UNSPECIFIED\"] = \"FINISH_REASON_UNSPECIFIED\";\n    /** Natural stop point of the model or provided stop sequence. */\n    FinishReason[\"STOP\"] = \"STOP\";\n    /** The maximum number of tokens as specified in the request was reached. */\n    FinishReason[\"MAX_TOKENS\"] = \"MAX_TOKENS\";\n    /**\n     * The token generation was stopped as the response was flagged for safety\n     * reasons.\n     */\n    FinishReason[\"SAFETY\"] = \"SAFETY\";\n    /**\n     * The token generation was stopped as the response was flagged for\n     * unauthorized citations.\n     */\n    FinishReason[\"RECITATION\"] = \"RECITATION\";\n    /** All other reasons that stopped the token generation. */\n    FinishReason[\"OTHER\"] = \"OTHER\";\n    /**\n     * The token generation was stopped as the response was flagged for the\n     * terms which are included from the terminology blocklist.\n     */\n    FinishReason[\"BLOCKLIST\"] = \"BLOCKLIST\";\n    /**\n     * The token generation was stopped as the response was flagged for\n     * the prohibited contents.\n     */\n    FinishReason[\"PROHIBITED_CONTENT\"] = \"PROHIBITED_CONTENT\";\n    /**\n     * The token generation was stopped as the response was flagged for\n     * Sensitive Personally Identifiable Information (SPII) contents.\n     */\n    FinishReason[\"SPII\"] = \"SPII\";\n})(FinishReason || (exports.FinishReason = FinishReason = {}));\n/**\n * Contains the list of OpenAPI data types\n * as defined by https://swagger.io/docs/specification/data-models/data-types/\n */\nvar FunctionDeclarationSchemaType;\n(function (FunctionDeclarationSchemaType) {\n    /** String type. */\n    FunctionDeclarationSchemaType[\"STRING\"] = \"STRING\";\n    /** Number type. */\n    FunctionDeclarationSchemaType[\"NUMBER\"] = \"NUMBER\";\n    /** Integer type. */\n    FunctionDeclarationSchemaType[\"INTEGER\"] = \"INTEGER\";\n    /** Boolean type. */\n    FunctionDeclarationSchemaType[\"BOOLEAN\"] = \"BOOLEAN\";\n    /** Array type. */\n    FunctionDeclarationSchemaType[\"ARRAY\"] = \"ARRAY\";\n    /** Object type. */\n    FunctionDeclarationSchemaType[\"OBJECT\"] = \"OBJECT\";\n})(FunctionDeclarationSchemaType || (exports.FunctionDeclarationSchemaType = FunctionDeclarationSchemaType = {}));\n//# sourceMappingURL=content.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/vertexai/build/src/types/content.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/vertexai/build/src/types/errors.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@google-cloud/vertexai/build/src/types/errors.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GoogleGenerativeAIError = exports.GoogleAuthError = exports.ClientError = void 0;\n/**\n * GoogleAuthError is thrown when there is authentication issue with the request\n */\nclass GoogleAuthError extends Error {\n    constructor(message, stackTrace = undefined) {\n        super(message);\n        this.stackTrace = undefined;\n        this.message = constructErrorMessage('GoogleAuthError', message);\n        this.name = 'GoogleAuthError';\n        this.stackTrace = stackTrace;\n    }\n}\nexports.GoogleAuthError = GoogleAuthError;\n/**\n * ClientError is thrown when http 4XX status is received.\n * For details please refer to https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#client_error_responses\n */\nclass ClientError extends Error {\n    constructor(message, stackTrace = undefined) {\n        super(message);\n        this.stackTrace = undefined;\n        this.message = constructErrorMessage('ClientError', message);\n        this.name = 'ClientError';\n        this.stackTrace = stackTrace;\n    }\n}\nexports.ClientError = ClientError;\n/**\n * GoogleGenerativeAIError is thrown when http response is not ok and status code is not 4XX\n * For details please refer to https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\n */\nclass GoogleGenerativeAIError extends Error {\n    constructor(message, stackTrace = undefined) {\n        super(message);\n        this.stackTrace = undefined;\n        this.message = constructErrorMessage('GoogleGenerativeAIError', message);\n        this.name = 'GoogleGenerativeAIError';\n        this.stackTrace = stackTrace;\n    }\n}\nexports.GoogleGenerativeAIError = GoogleGenerativeAIError;\nfunction constructErrorMessage(exceptionClass, message) {\n    return `[VertexAI.${exceptionClass}]: ${message}`;\n}\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC92ZXJ0ZXhhaS9idWlsZC9zcmMvdHlwZXMvZXJyb3JzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsK0JBQStCLEdBQUcsdUJBQXVCLEdBQUcsbUJBQW1CO0FBQy9FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBLHdCQUF3QixlQUFlLEtBQUssUUFBUTtBQUNwRDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXVpem5vdGUvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC92ZXJ0ZXhhaS9idWlsZC9zcmMvdHlwZXMvZXJyb3JzLmpzP2Q1ODciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Hb29nbGVHZW5lcmF0aXZlQUlFcnJvciA9IGV4cG9ydHMuR29vZ2xlQXV0aEVycm9yID0gZXhwb3J0cy5DbGllbnRFcnJvciA9IHZvaWQgMDtcbi8qKlxuICogR29vZ2xlQXV0aEVycm9yIGlzIHRocm93biB3aGVuIHRoZXJlIGlzIGF1dGhlbnRpY2F0aW9uIGlzc3VlIHdpdGggdGhlIHJlcXVlc3RcbiAqL1xuY2xhc3MgR29vZ2xlQXV0aEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIHN0YWNrVHJhY2UgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMuc3RhY2tUcmFjZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gY29uc3RydWN0RXJyb3JNZXNzYWdlKCdHb29nbGVBdXRoRXJyb3InLCBtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ0dvb2dsZUF1dGhFcnJvcic7XG4gICAgICAgIHRoaXMuc3RhY2tUcmFjZSA9IHN0YWNrVHJhY2U7XG4gICAgfVxufVxuZXhwb3J0cy5Hb29nbGVBdXRoRXJyb3IgPSBHb29nbGVBdXRoRXJyb3I7XG4vKipcbiAqIENsaWVudEVycm9yIGlzIHRocm93biB3aGVuIGh0dHAgNFhYIHN0YXR1cyBpcyByZWNlaXZlZC5cbiAqIEZvciBkZXRhaWxzIHBsZWFzZSByZWZlciB0byBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVFRQL1N0YXR1cyNjbGllbnRfZXJyb3JfcmVzcG9uc2VzXG4gKi9cbmNsYXNzIENsaWVudEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIHN0YWNrVHJhY2UgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMuc3RhY2tUcmFjZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gY29uc3RydWN0RXJyb3JNZXNzYWdlKCdDbGllbnRFcnJvcicsIG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnQ2xpZW50RXJyb3InO1xuICAgICAgICB0aGlzLnN0YWNrVHJhY2UgPSBzdGFja1RyYWNlO1xuICAgIH1cbn1cbmV4cG9ydHMuQ2xpZW50RXJyb3IgPSBDbGllbnRFcnJvcjtcbi8qKlxuICogR29vZ2xlR2VuZXJhdGl2ZUFJRXJyb3IgaXMgdGhyb3duIHdoZW4gaHR0cCByZXNwb25zZSBpcyBub3Qgb2sgYW5kIHN0YXR1cyBjb2RlIGlzIG5vdCA0WFhcbiAqIEZvciBkZXRhaWxzIHBsZWFzZSByZWZlciB0byBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVFRQL1N0YXR1c1xuICovXG5jbGFzcyBHb29nbGVHZW5lcmF0aXZlQUlFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBzdGFja1RyYWNlID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLnN0YWNrVHJhY2UgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9IGNvbnN0cnVjdEVycm9yTWVzc2FnZSgnR29vZ2xlR2VuZXJhdGl2ZUFJRXJyb3InLCBtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ0dvb2dsZUdlbmVyYXRpdmVBSUVycm9yJztcbiAgICAgICAgdGhpcy5zdGFja1RyYWNlID0gc3RhY2tUcmFjZTtcbiAgICB9XG59XG5leHBvcnRzLkdvb2dsZUdlbmVyYXRpdmVBSUVycm9yID0gR29vZ2xlR2VuZXJhdGl2ZUFJRXJyb3I7XG5mdW5jdGlvbiBjb25zdHJ1Y3RFcnJvck1lc3NhZ2UoZXhjZXB0aW9uQ2xhc3MsIG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gYFtWZXJ0ZXhBSS4ke2V4Y2VwdGlvbkNsYXNzfV06ICR7bWVzc2FnZX1gO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/vertexai/build/src/types/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/vertexai/build/src/types/generate_content_response_handler.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/vertexai/build/src/types/generate_content_response_handler.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GenerateContentResponseHandler = void 0;\n/** Helper class to render any extra properties out of\n * {@link GenerateContentResponse} or properties of {@link GenerateContentResponse}\n */\nclass GenerateContentResponseHandler {\n    /**\n     * Extracts function calls from a {@link GenerateContentCandidate}.\n     *\n     * @param candidate - The candidate to extract function calls from.\n     * @returns the array of function calls in a {@link GenerateContentCandidate}.\n     */\n    static getFunctionCallsFromCandidate(candidate) {\n        if (!candidate)\n            return [];\n        return candidate.content.parts\n            .filter((part) => !!part && !!part.functionCall)\n            .map((part) => part.functionCall);\n    }\n}\nexports.GenerateContentResponseHandler = GenerateContentResponseHandler;\n//# sourceMappingURL=generate_content_response_handler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC92ZXJ0ZXhhaS9idWlsZC9zcmMvdHlwZXMvZ2VuZXJhdGVfY29udGVudF9yZXNwb25zZV9oYW5kbGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0NBQXNDO0FBQ3RDO0FBQ0EsSUFBSSwrQkFBK0Isa0JBQWtCO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QywrQkFBK0I7QUFDdEU7QUFDQTtBQUNBLGtEQUFrRCwrQkFBK0I7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXVpem5vdGUvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC92ZXJ0ZXhhaS9idWlsZC9zcmMvdHlwZXMvZ2VuZXJhdGVfY29udGVudF9yZXNwb25zZV9oYW5kbGVyLmpzPzMyMWEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5HZW5lcmF0ZUNvbnRlbnRSZXNwb25zZUhhbmRsZXIgPSB2b2lkIDA7XG4vKiogSGVscGVyIGNsYXNzIHRvIHJlbmRlciBhbnkgZXh0cmEgcHJvcGVydGllcyBvdXQgb2ZcbiAqIHtAbGluayBHZW5lcmF0ZUNvbnRlbnRSZXNwb25zZX0gb3IgcHJvcGVydGllcyBvZiB7QGxpbmsgR2VuZXJhdGVDb250ZW50UmVzcG9uc2V9XG4gKi9cbmNsYXNzIEdlbmVyYXRlQ29udGVudFJlc3BvbnNlSGFuZGxlciB7XG4gICAgLyoqXG4gICAgICogRXh0cmFjdHMgZnVuY3Rpb24gY2FsbHMgZnJvbSBhIHtAbGluayBHZW5lcmF0ZUNvbnRlbnRDYW5kaWRhdGV9LlxuICAgICAqXG4gICAgICogQHBhcmFtIGNhbmRpZGF0ZSAtIFRoZSBjYW5kaWRhdGUgdG8gZXh0cmFjdCBmdW5jdGlvbiBjYWxscyBmcm9tLlxuICAgICAqIEByZXR1cm5zIHRoZSBhcnJheSBvZiBmdW5jdGlvbiBjYWxscyBpbiBhIHtAbGluayBHZW5lcmF0ZUNvbnRlbnRDYW5kaWRhdGV9LlxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRGdW5jdGlvbkNhbGxzRnJvbUNhbmRpZGF0ZShjYW5kaWRhdGUpIHtcbiAgICAgICAgaWYgKCFjYW5kaWRhdGUpXG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIHJldHVybiBjYW5kaWRhdGUuY29udGVudC5wYXJ0c1xuICAgICAgICAgICAgLmZpbHRlcigocGFydCkgPT4gISFwYXJ0ICYmICEhcGFydC5mdW5jdGlvbkNhbGwpXG4gICAgICAgICAgICAubWFwKChwYXJ0KSA9PiBwYXJ0LmZ1bmN0aW9uQ2FsbCk7XG4gICAgfVxufVxuZXhwb3J0cy5HZW5lcmF0ZUNvbnRlbnRSZXNwb25zZUhhbmRsZXIgPSBHZW5lcmF0ZUNvbnRlbnRSZXNwb25zZUhhbmRsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZW5lcmF0ZV9jb250ZW50X3Jlc3BvbnNlX2hhbmRsZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/vertexai/build/src/types/generate_content_response_handler.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/vertexai/build/src/types/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@google-cloud/vertexai/build/src/types/index.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GenerateContentResponseHandler = void 0;\n__exportStar(__webpack_require__(/*! ./content */ \"(rsc)/./node_modules/@google-cloud/vertexai/build/src/types/content.js\"), exports);\n__exportStar(__webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/@google-cloud/vertexai/build/src/types/errors.js\"), exports);\nvar generate_content_response_handler_1 = __webpack_require__(/*! ./generate_content_response_handler */ \"(rsc)/./node_modules/@google-cloud/vertexai/build/src/types/generate_content_response_handler.js\");\nObject.defineProperty(exports, \"GenerateContentResponseHandler\", ({ enumerable: true, get: function () { return generate_content_response_handler_1.GenerateContentResponseHandler; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC92ZXJ0ZXhhaS9idWlsZC9zcmMvdHlwZXMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQ0FBc0M7QUFDdEMsYUFBYSxtQkFBTyxDQUFDLHlGQUFXO0FBQ2hDLGFBQWEsbUJBQU8sQ0FBQyx1RkFBVTtBQUMvQiwwQ0FBMEMsbUJBQU8sQ0FBQyw2SUFBcUM7QUFDdkYsa0VBQWlFLEVBQUUscUNBQXFDLDhFQUE4RSxFQUFDO0FBQ3ZMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXVpem5vdGUvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC92ZXJ0ZXhhaS9idWlsZC9zcmMvdHlwZXMvaW5kZXguanM/ZmNmZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIzIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuR2VuZXJhdGVDb250ZW50UmVzcG9uc2VIYW5kbGVyID0gdm9pZCAwO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvbnRlbnRcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2Vycm9yc1wiKSwgZXhwb3J0cyk7XG52YXIgZ2VuZXJhdGVfY29udGVudF9yZXNwb25zZV9oYW5kbGVyXzEgPSByZXF1aXJlKFwiLi9nZW5lcmF0ZV9jb250ZW50X3Jlc3BvbnNlX2hhbmRsZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJHZW5lcmF0ZUNvbnRlbnRSZXNwb25zZUhhbmRsZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdlbmVyYXRlX2NvbnRlbnRfcmVzcG9uc2VfaGFuZGxlcl8xLkdlbmVyYXRlQ29udGVudFJlc3BvbnNlSGFuZGxlcjsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/vertexai/build/src/types/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/vertexai/build/src/util/constants.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@google-cloud/vertexai/build/src/util/constants.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CREDENTIAL_ERROR_MESSAGE = exports.USER_AGENT = exports.SYSTEM_ROLE = exports.MODEL_ROLE = exports.USER_ROLE = exports.STREAMING_GENERATE_CONTENT_METHOD = exports.GENERATE_CONTENT_METHOD = void 0;\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexports.GENERATE_CONTENT_METHOD = 'generateContent';\nexports.STREAMING_GENERATE_CONTENT_METHOD = 'streamGenerateContent';\nexports.USER_ROLE = 'user';\nexports.MODEL_ROLE = 'model';\nexports.SYSTEM_ROLE = 'system';\nconst USER_AGENT_PRODUCT = 'model-builder';\nconst CLIENT_LIBRARY_VERSION = '1.1.0'; // x-release-please-version\nconst CLIENT_LIBRARY_LANGUAGE = `grpc-node/${CLIENT_LIBRARY_VERSION}`;\nexports.USER_AGENT = `${USER_AGENT_PRODUCT}/${CLIENT_LIBRARY_VERSION} ${CLIENT_LIBRARY_LANGUAGE}`;\nexports.CREDENTIAL_ERROR_MESSAGE = '\\nUnable to authenticate your request\\\n        \\nDepending on your run time environment, you can get authentication by\\\n        \\n- if in local instance or cloud shell: `!gcloud auth login`\\\n        \\n- if in Colab:\\\n        \\n    -`from google.colab import auth`\\\n        \\n    -`auth.authenticate_user()`\\\n        \\n- if in service account or other: please follow guidance in https://cloud.google.com/docs/authentication';\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC92ZXJ0ZXhhaS9idWlsZC9zcmMvdXRpbC9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0NBQWdDLEdBQUcsa0JBQWtCLEdBQUcsbUJBQW1CLEdBQUcsa0JBQWtCLEdBQUcsaUJBQWlCLEdBQUcseUNBQXlDLEdBQUcsK0JBQStCO0FBQ2xNO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CLHlDQUF5QztBQUN6QyxpQkFBaUI7QUFDakIsa0JBQWtCO0FBQ2xCLG1CQUFtQjtBQUNuQjtBQUNBLHdDQUF3QztBQUN4Qyw2Q0FBNkMsdUJBQXVCO0FBQ3BFLGtCQUFrQixNQUFNLG1CQUFtQixHQUFHLHdCQUF3QixFQUFFLHdCQUF3QjtBQUNoRyxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xdWl6bm90ZS8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3ZlcnRleGFpL2J1aWxkL3NyYy91dGlsL2NvbnN0YW50cy5qcz83NDFhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DUkVERU5USUFMX0VSUk9SX01FU1NBR0UgPSBleHBvcnRzLlVTRVJfQUdFTlQgPSBleHBvcnRzLlNZU1RFTV9ST0xFID0gZXhwb3J0cy5NT0RFTF9ST0xFID0gZXhwb3J0cy5VU0VSX1JPTEUgPSBleHBvcnRzLlNUUkVBTUlOR19HRU5FUkFURV9DT05URU5UX01FVEhPRCA9IGV4cG9ydHMuR0VORVJBVEVfQ09OVEVOVF9NRVRIT0QgPSB2b2lkIDA7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuZXhwb3J0cy5HRU5FUkFURV9DT05URU5UX01FVEhPRCA9ICdnZW5lcmF0ZUNvbnRlbnQnO1xuZXhwb3J0cy5TVFJFQU1JTkdfR0VORVJBVEVfQ09OVEVOVF9NRVRIT0QgPSAnc3RyZWFtR2VuZXJhdGVDb250ZW50JztcbmV4cG9ydHMuVVNFUl9ST0xFID0gJ3VzZXInO1xuZXhwb3J0cy5NT0RFTF9ST0xFID0gJ21vZGVsJztcbmV4cG9ydHMuU1lTVEVNX1JPTEUgPSAnc3lzdGVtJztcbmNvbnN0IFVTRVJfQUdFTlRfUFJPRFVDVCA9ICdtb2RlbC1idWlsZGVyJztcbmNvbnN0IENMSUVOVF9MSUJSQVJZX1ZFUlNJT04gPSAnMS4xLjAnOyAvLyB4LXJlbGVhc2UtcGxlYXNlLXZlcnNpb25cbmNvbnN0IENMSUVOVF9MSUJSQVJZX0xBTkdVQUdFID0gYGdycGMtbm9kZS8ke0NMSUVOVF9MSUJSQVJZX1ZFUlNJT059YDtcbmV4cG9ydHMuVVNFUl9BR0VOVCA9IGAke1VTRVJfQUdFTlRfUFJPRFVDVH0vJHtDTElFTlRfTElCUkFSWV9WRVJTSU9OfSAke0NMSUVOVF9MSUJSQVJZX0xBTkdVQUdFfWA7XG5leHBvcnRzLkNSRURFTlRJQUxfRVJST1JfTUVTU0FHRSA9ICdcXG5VbmFibGUgdG8gYXV0aGVudGljYXRlIHlvdXIgcmVxdWVzdFxcXG4gICAgICAgIFxcbkRlcGVuZGluZyBvbiB5b3VyIHJ1biB0aW1lIGVudmlyb25tZW50LCB5b3UgY2FuIGdldCBhdXRoZW50aWNhdGlvbiBieVxcXG4gICAgICAgIFxcbi0gaWYgaW4gbG9jYWwgaW5zdGFuY2Ugb3IgY2xvdWQgc2hlbGw6IGAhZ2Nsb3VkIGF1dGggbG9naW5gXFxcbiAgICAgICAgXFxuLSBpZiBpbiBDb2xhYjpcXFxuICAgICAgICBcXG4gICAgLWBmcm9tIGdvb2dsZS5jb2xhYiBpbXBvcnQgYXV0aGBcXFxuICAgICAgICBcXG4gICAgLWBhdXRoLmF1dGhlbnRpY2F0ZV91c2VyKClgXFxcbiAgICAgICAgXFxuLSBpZiBpbiBzZXJ2aWNlIGFjY291bnQgb3Igb3RoZXI6IHBsZWFzZSBmb2xsb3cgZ3VpZGFuY2UgaW4gaHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL2RvY3MvYXV0aGVudGljYXRpb24nO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/vertexai/build/src/util/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/vertexai/build/src/util/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@google-cloud/vertexai/build/src/util/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.constants = void 0;\nexports.constants = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@google-cloud/vertexai/build/src/util/constants.js\");\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC92ZXJ0ZXhhaS9idWlsZC9zcmMvdXRpbC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlCQUFpQjtBQUNqQixxSUFBMEM7QUFDMUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xdWl6bm90ZS8uL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3ZlcnRleGFpL2J1aWxkL3NyYy91dGlsL2luZGV4LmpzPzUwNDYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb25zdGFudHMgPSB2b2lkIDA7XG5leHBvcnRzLmNvbnN0YW50cyA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/vertexai/build/src/util/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/vertexai/build/src/vertex_ai.js":
/*!********************************************************************!*\
  !*** ./node_modules/@google-cloud/vertexai/build/src/vertex_ai.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.VertexAI = void 0;\n/* tslint:disable */\nconst google_auth_library_1 = __webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/google-auth-library/build/src/index.js\");\nconst models_1 = __webpack_require__(/*! ./models */ \"(rsc)/./node_modules/@google-cloud/vertexai/build/src/models/index.js\");\nconst errors_1 = __webpack_require__(/*! ./types/errors */ \"(rsc)/./node_modules/@google-cloud/vertexai/build/src/types/errors.js\");\n/**\n * The `VertexAI` class is the base class for authenticating to Vertex AI.\n * To use Vertex AI's generative AI models, use the `getGenerativeModel` method.\n * To use generative AI features that are in Preview, use the `preview`\n * namespace.\n */\nclass VertexAI {\n    /**\n     * @constructor\n     * @param init - assign authentication related information,\n     *     including the project and location strings, to instantiate a Vertex AI\n     * client.\n     */\n    constructor(init) {\n        const opts = validateGoogleAuthOptions(init.project, init.googleAuthOptions);\n        this.project = init.project;\n        this.location = init.location;\n        this.googleAuth = new google_auth_library_1.GoogleAuth(opts);\n        this.apiEndpoint = init.apiEndpoint;\n        this.preview = new VertexAIPreview(this.project, this.location, this.googleAuth, this.apiEndpoint);\n    }\n    /**\n     * Gets the GenerativeModel class instance.\n     *\n     * This method creates a new instance of the `GenerativeModel` class with the\n     * platform initialization parameters provided in {@link VertexInit} and model\n     * initialization parameters provided in {@link ModelParams}. You can\n     * optionally provide {@link RequestOptions} to override the default request\n     * options.\n     *\n     * @example\n     * ```\n     * const project = 'your-cloud-project';\n     * const location = 'us-central1';\n     * const textModel =  'gemini-1.0-pro';\n     * const visionModel = 'gemini-1.0-pro-vision';\n     *\n     * const vertexAI = new VertexAI({project: project, location: location});\n     *\n     * // Instantiate models\n     * const generativeModel = vertexAI.getGenerativeModel({\n     *   model: textModel,\n     *   // The following parameters are optional\n     *   // They can also be passed to individual content generation requests\n     *   safetySettings: [{\n     *                      category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,\n     *                      threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE\n     *                     }],\n     *   generationConfig: {maxOutputTokens: 256},\n     * });\n     *\n     * const generativeVisionModel = vertexAI.getGenerativeModel({\n     *   model: visionModel,\n     * });\n     *\n     * const generativeModelPreview = vertexAI.preview.getGenerativeModel({\n     *   model: textModel,\n     * });\n     * ```\n     *\n     * @param modelParams - {@link ModelParams} Parameters to\n     *     specify the generative model.\n     * @param requestOptions - {@link RequestOptions} Parameters to specify\n     *     request options\n     * @returns Instance of the GenerativeModel class.\n     */\n    getGenerativeModel(modelParams, requestOptions) {\n        const getGenerativeModelParams = {\n            model: modelParams.model,\n            project: this.project,\n            location: this.location,\n            googleAuth: this.googleAuth,\n            apiEndpoint: this.apiEndpoint,\n            safetySettings: modelParams.safetySettings,\n            generationConfig: modelParams.generationConfig,\n            tools: modelParams.tools,\n            requestOptions: requestOptions,\n            systemInstruction: modelParams.systemInstruction,\n        };\n        return new models_1.GenerativeModel(getGenerativeModelParams);\n    }\n}\nexports.VertexAI = VertexAI;\n/**\n * The preview namespace for VertexAI. Users invoke the `getGenerativeModel`\n * method to start using generative AI features that are in preview.\n */\nclass VertexAIPreview {\n    /**\n     * @constructor\n     * @param project - The Google Cloud project to use for the request\n     * @param location - location The Google Cloud project location to use for the\n     *     request\n     * @param googleAuth - The GoogleAuthen class instance from\n     *     google-auth-library.\n     *        Complete list of authentication options is documented in the\n     * GoogleAuthOptions interface:\n     *        https://github.com/googleapis/google-auth-library-nodejs/blob/main/src/auth/googleauth.ts\n     * @param apiEndpoint - [apiEndpoint] The base Vertex AI endpoint to use for\n     *     the request. If\n     *        not provided, the default regionalized endpoint\n     *        (i.e. us-central1-aiplatform.googleapis.com) will be used.\n     */\n    constructor(project, location, googleAuth, apiEndpoint) {\n        this.project = project;\n        this.location = location;\n        this.googleAuth = googleAuth;\n        this.apiEndpoint = apiEndpoint;\n    }\n    /**\n     * @param modelParams - {@link ModelParams} Parameters to\n     *     specify the generative model.\n     * @returns Instance of the GenerativeModelPreview class.\n     */\n    getGenerativeModel(modelParams, requestOptions) {\n        const getGenerativeModelParams = {\n            model: modelParams.model,\n            project: this.project,\n            location: this.location,\n            googleAuth: this.googleAuth,\n            apiEndpoint: this.apiEndpoint,\n            safetySettings: modelParams.safetySettings,\n            generationConfig: modelParams.generationConfig,\n            tools: modelParams.tools,\n            requestOptions: requestOptions,\n            systemInstruction: modelParams.systemInstruction,\n        };\n        return new models_1.GenerativeModelPreview(getGenerativeModelParams);\n    }\n}\nfunction validateGoogleAuthOptions(project, googleAuthOptions) {\n    let opts;\n    const requiredScope = 'https://www.googleapis.com/auth/cloud-platform';\n    if (!googleAuthOptions) {\n        opts = {\n            scopes: requiredScope,\n        };\n        return opts;\n    }\n    if (googleAuthOptions.projectId && googleAuthOptions.projectId !== project) {\n        throw new Error(`inconsistent project ID values. argument project got value ${project} but googleAuthOptions.projectId got value ${googleAuthOptions.projectId}`);\n    }\n    opts = googleAuthOptions;\n    if (!opts.scopes) {\n        opts.scopes = requiredScope;\n        return opts;\n    }\n    if ((typeof opts.scopes === 'string' && opts.scopes !== requiredScope) ||\n        (Array.isArray(opts.scopes) && opts.scopes.indexOf(requiredScope) < 0)) {\n        throw new errors_1.GoogleAuthError(`input GoogleAuthOptions.scopes ${opts.scopes} doesn't contain required scope ${requiredScope}, please include ${requiredScope} into GoogleAuthOptions.scopes or leave GoogleAuthOptions.scopes undefined`);\n    }\n    return opts;\n}\n//# sourceMappingURL=vertex_ai.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/vertexai/build/src/vertex_ai.js\n");

/***/ })

};
;